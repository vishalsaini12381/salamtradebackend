{
  "_from": "react-geosuggest",
  "_id": "react-geosuggest@2.12.0",
  "_inBundle": false,
  "_integrity": "sha512-9zlZ4t+O41kmNRi6Ap3RiLOsIduSjraLPbhbWotDTE3lBsTMgu3zAXO7pgCnM0gnxi8+gRX/F0wTyInWX9tHSQ==",
  "_location": "/react-geosuggest",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-geosuggest",
    "fetchSpec": "latest",
    "name": "react-geosuggest",
    "raw": "react-geosuggest",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-geosuggest/-/react-geosuggest-2.12.0.tgz",
  "_shasum": "dcbc799708383c89701fcb6d307d9537df239a4d",
  "_spec": "react-geosuggest",
  "_where": "/home/shivendra/Desktop/techoffice/salamvendor/vendorclient",
  "author": {
    "email": "katzki@ubilabs.net",
    "name": "Robert Katzki"
  },
  "bugs": {
    "url": "https://github.com/ubilabs/react-geosuggest/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "classnames": "^2.2.6",
    "lodash.debounce": "^4.0.6"
  },
  "deprecated": false,
  "description": "A React autosuggest for the Google Maps Places API.",
  "devDependencies": {
    "@types/chai": "^4.1.7",
    "@types/classnames": "^2.2.7",
    "@types/googlemaps": "^3.30.19",
    "@types/jsdom": "^12.2.3",
    "@types/lodash.debounce": "^4.0.6",
    "@types/mocha": "^5.2.6",
    "@types/react": "^16.8.12",
    "@types/react-dom": "^16.8.3",
    "@types/sinon": "^7.0.11",
    "chai": "^4.2.0",
    "conventional-changelog-generator": "0.0.3",
    "copyfiles": "^2.1.0",
    "cross-env": "^5.2.0",
    "gh-pages": "^2.0.1",
    "jsdom": "^14.0.0",
    "light-server": "^2.6.2",
    "mkdirp": "^0.5.1",
    "mocha": "^6.0.2",
    "nodecat": "^2.0.0",
    "nyc": "^13.3.0",
    "prettier": "^1.16.4",
    "prop-types": "^15.7.2",
    "react": "^16.8.6",
    "react-dom": "^16.8.6",
    "rimraf": "^2.6.3",
    "rollup": "^1.9.0",
    "rollup-plugin-commonjs": "^9.3.4",
    "rollup-plugin-node-resolve": "^4.1.0",
    "rollup-plugin-peer-deps-external": "^2.2.0",
    "rollup-plugin-replace": "^2.1.1",
    "rollup-plugin-typescript2": "^0.20.1",
    "rollup-plugin-uglify": "^6.0.2",
    "sinon": "^7.3.1",
    "ts-node": "^8.0.3",
    "tslint": "^5.15.0",
    "tslint-config-prettier": "^1.18.0",
    "typescript": "^3.4.1"
  },
  "homepage": "https://github.com/ubilabs/react-geosuggest",
  "keywords": [
    "autosuggest",
    "google",
    "places",
    "react",
    "react-component"
  ],
  "license": "MIT",
  "main": "module/Geosuggest.umd.js",
  "module": "module/Geosuggest.esm.js",
  "name": "react-geosuggest",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0 || ^16.0.0",
    "react-dom": "^0.14.0 || ^15.0.0 || ^16.0.0"
  },
  "readme": "# React Geosuggest [![Build Status](https://travis-ci.org/ubilabs/react-geosuggest.svg?branch=master)](https://travis-ci.org/ubilabs/react-geosuggest)\n\nA [React](http://facebook.github.io/react/) autosuggest for the Google Maps Places API. You can also define your own suggests as defaults. Works with [Preact](https://github.com/developit/preact), too.\n\n\n## Demo\n\nLive demo: [ubilabs.github.io/react-geosuggest](http://ubilabs.github.io/react-geosuggest/)\n\n\n## Installation\n\nAs this component uses the Google Maps Places API to get suggests, you must include the Google Maps Places API in the `<head>` of your HTML:\n\n```html\n<!DOCTYPE html>\n  <html>\n  <head>\n    …\n    <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY_HERE&libraries=places\"></script>\n  </head>\n  <body>\n    …\n  </body>\n</html>\n```\n\nVisit the [Google Developer Console](https://console.developers.google.com) to generate your API key. The API's that you have to enable in your Google API Manager Dashboard are [Google Maps Geocoding API](https://developers.google.com/maps/documentation/geocoding/start), [Google Places API Web Service](https://developers.google.com/places/web-service/) and [Google Maps Javascript API](https://developers.google.com/maps/documentation/javascript/).\n\nThe easiest way to use geosuggest is to install it from NPM and include it in your own React build process (using [Browserify](http://browserify.org), [Webpack](http://webpack.github.io/), etc).\n\nYou can also use the standalone build by including `dist/react-geosuggest.js` in your page. If you use this, make sure you have already included React, and it is available as a global variable.\n\n```sh\nnpm install react-geosuggest --save\n```\n\n## Usage\n\nThe Geosuggest works out of the box by just including it. However, you can customize the behaviour with the properties noted below.\n\n### ES6:\n\n```js\nimport Geosuggest from 'react-geosuggest';\n\n<Geosuggest />\n```\n\n### ES5:\n\n```js\nvar Geosuggest = require('react-geosuggest').default;\n\n<Geosuggest />\n```\n\n### Properties\n\n#### placeholder\nType: `String`\nDefault: `Search places`\n\nThe input field will get this placeholder text.\n\n#### initialValue\nType: `String`\nDefault: `''`\n\nAn initial value for the input, when you want to prefill the suggest.\n\n#### className\nType: `String`\nDefault: `''`\n\nAdd an additional class to the geosuggest container.\n\n#### style\nType: `Object`\nDefault: `{\n  'input': {},\n  'suggests': {},\n  'suggestItem': {}\n}`\n\nAdd an additional style to `Geosuggest`.\nThis would support overriding/adding styles to the input suggestList and suggestItem.\n\n#### inputClassName\nType: `String`\nDefault: `''`\n\nAdd an additional class to the input.\n\n#### disabled\nType: `Boolean`\nDefault: `false`\n\nDefines whether the input is disabled.\n\n#### location\nType: [`google.maps.LatLng`](https://developers.google.com/maps/documentation/javascript/reference#LatLng)\nDefault: `null`\n\nTo get localized suggestions, define a location to bias the suggests.\n\n#### radius\nType: `Number`\nDefault: `0`\n\nThe radius in meters defines the area around the location to use for biasing the suggests. It must be accompanied by a `location` parameter.\n\n#### bounds\nType: [`LatLngBounds`](https://developers.google.com/maps/documentation/javascript/reference?csw=1#LatLngBounds)\nDefault: `null`\n\nThe bounds to use for biasing the suggests. If this is set, `location` and `radius` are ignored.\n\n#### country\nType: `String` or `Array`\nDefault: `null`\n\nRestricts predictions to the specified country (ISO 3166-1 Alpha-2 country code, case insensitive). E.g., us, br, au. You can provide a single one, or an array of up to 5 country code strings.\n\n#### types\nType: `Array`\nDefault: `null`\n\nThe types of predictions to be returned. Four types are supported: `establishment` for businesses, `geocode` for addresses, `(regions)` for administrative regions and `(cities)` for localities. If nothing is specified, all types are returned. Consult the Google Docs for [up to date types](https://developers.google.com/maps/documentation/javascript/reference#AutocompletionRequest).\n\n#### fixtures\nType: `Array`\nDefault: `[]`\n\nAn array with fixtures (defaults). Each fixture has to be an object with a `label` key in it. Optionally provide a `location`, but the Geosuggest will geocode the label if no location is provided.\n\nYou can also add a `className` key to a fixture. This class will be applied to the fixture item.\n\n#### maxFixtures\nType: `Number`\nDefault: `10`\n\nMaximum number of fixtures to render.\n\n#### placeDetailFields\nType: `Array`\nDefault: `null`\n\nBy default Google returns all fields when getting place details which can [impact billing](https://developers.google.com/maps/billing/understanding-cost-of-use#data-skus). You can optionally pass an [array of fields to include in place results](https://developers.google.com/maps/documentation/javascript/reference/places-service#PlaceDetailsRequest.fields) to limit what is returned and potentially reduce billing impact. `geometry` will always be added as we depend on the location for the suggest selection.\n\n#### googleMaps\nType: `Object`\nDefault: `google.maps`\n\nIn case you want to provide your own Google Maps object, pass it in as googleMaps. The default is the global google maps object.\n\n#### ignoreTab\nType: `Boolean`\nDefault: `false`\n\nWhen the tab key is pressed, the `onSelect` handler is invoked. Set to true to not invoke `onSelect` on tab press.\n\n#### ignoreEnter\nType: `Boolean`\nDefault: `false`\n\nWhen the enter key is pressed, the `onSelect` handler is invoked. Set to true to not invoke `onSelect` on enter press.\n\n#### queryDelay\nType: `Number`\nDefault: `250`\n\nSets the delay in milliseconds after typing before a request will be sent to find suggestions.\nSpecify `0` if you wish to fetch suggestions after every keystroke.\n\n#### minLength\nType: `Number`\nDefault: `1`\n\nSets a minimum length of characters before a request will be sent to find suggestions.\n\n#### highlightMatch\nType: `Boolean`\nDefault: `true`\n\nHighlights matched text.\n\n#### onFocus\nType: `Function`\nDefault: `function() {}`\n\nGets triggered when the input field receives focus.\n\n#### onBlur\nType: `Function`\nDefault: `function(value) {}`\n\nGets triggered when input field loses focus.\n\n#### onChange\nType: `Function`\nDefault: `function(value) {}`\n\nGets triggered when input field changes the value.\n\n#### onKeyDown\nType: `Function`\nDefault: `function(event) {}`\n\nGets triggered when input field has a key pressed down. This event is triggered before onKeyPress.\n\n#### onKeyPress\nType: `Function`\nDefault: `function(event) {}`\n\nGets triggered when input field gets key press.\n\n#### onSuggestSelect\nType: `Function`\nDefault: `function(suggest) {}`\n\nGets triggered when a suggest got selected. Only parameter is an object with data of the selected suggest. This data is available:\n\n* `label` – Type `String` – The label name\n* `placeId` – Type `String` – If it is a preset, equals the `label`. Else it is the Google Maps `placeID`\n* `location` – Type `Object` – The location containing `lat` and `lng`\n* `gmaps` – Type `Object` – *Optional!* The complete response when there was a Google Maps geocode necessary (e.g. no location provided for presets). [Check the Google Maps Reference](https://developers.google.com/maps/documentation/javascript/reference#GeocoderResult) for more information on it’s structure.\n\n#### onUpdateSuggests\nType: `Function`\nDefault: `function(suggests, activeSuggest) {}`\n\nGets triggered when the suggest list changes. Arguments include the suggest list and the current activeSuggest. Useful if you want to render the list of suggests outside of react-geosuggest.\n\n#### onActivateSuggest\nType: `Function`\nDefault: `function(suggest) {}`\n\nGets triggered when a suggest is activated in the list. Only parameter is an object with data of the selected suggest. This data is available:\n\n* `label` – Type `String` – The label name\n* `placeId` – Type `String` – If it is a preset, equals the `label`. Else it is the Google Maps `placeID`\n\n#### onSuggestNoResults\nType: `Function`\nDefault: `function(userInput) {}`\n\nGets triggered when there are no suggest results found\n\n#### getSuggestLabel\nType: `Function`\nDefault: `function(suggest) { return suggest.description; }`\n\nUsed to generate a custom label for a suggest. Only parameter is a suggest (google.maps.places.AutocompletePrediction). [Check the Google Maps Reference](https://developers.google.com/maps/documentation/javascript/reference#GeocoderResult) for more information on it’s structure.\n\n#### renderSuggestItem\nType: `Function`\nDefault: `null`\n\nUsed to customize the inner html of SuggestItem and allows for controlling what properties of the suggest object you want to render. Also a convenient way to add additional styling to different rendered elements within SuggestItem. The function is passed both the suggestion and the user input.\n\n#### skipSuggest\nType: `Function`\nDefault: `function(suggest) {}`\n\nIf the function returns true then the suggest will not be included in the displayed results. Only parameter is an object with data of the selected suggest. (See above)\n\n#### autoActivateFirstSuggest\nType: `Boolean`\nDefault: `false`\n\nAutomatically activate the first suggestion as you type. If false, the exact term(s) in the input will be used when searching and may return a result not in the list of suggestions.\n\n#### label\nType: `String`\nDefault: `null`\n\nIf the `label` and a `id` prop (see \"Others\") were supplied, a `<label>` tag with the passed label text will be rendered. The `<label>` element's `for` attribute will correctly point to the `id` of the `<input>` element.\n\n#### suggestsClassName\nType: `String`\nDefault: `''`\n\nAdd an additional class to suggest list.\n\n#### suggestsHiddenClassName\nType: `String`\nDefault: `null`\n\nAdditional `className` to toggle as the list of suggestions changes visibility.\n\n#### suggestItemClassName\nType: `String`\nDefault: `''`\n\nAdd an additional class to suggest item.\n\n#### suggestItemActiveClassName\nType: `String`,\nDefault: `null`\n\nAdditional `className` to add when a suggestion item is active.\n\n#### autoComplete\nType: `String`,\nDefault: `nope`\n\nAutocomplete input attribute.\n\n#### Others\n\nAll [allowed attributes for `input[type=\"text\"]`](https://github.com/ubilabs/react-geosuggest/blob/master/src/filter-input-attributes.ts#L4)\nAll [DOM clipboard events](https://facebook.github.io/react/docs/events.html#clipboard-events).  \nAll [DOM mouse events](https://facebook.github.io/react/docs/events.html#mouse-events) except for drag & drop.\n\n\n### Exposed component functions\nThese functions are accessible by setting \"ref\" on the component (see example below)\n\n#### focus()\nCall `focus` to focus on the element. The suggest list will be expanded with the current suggestions.\n\n#### blur()\nCall `blur` to blur (unfocus) the element. The suggest list will be closed.\n\n#### update(value)\nIt is possible to update the value of the input contained within the GeoSuggest component by calling the `update` function with a new desired `value` of the type String.\n\n#### clear()\nIt is also possible to clear the value of the input contained within the GeoSuggest component by calling the `clear` function.\n\n#### selectSuggest()\nSame effect as hitting `enter` (will geocode the text inside of the input).\n\n### Example\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Geosuggest from 'react-geosuggest';\n\nclass App extends React.Component {\n  /**\n   * Render the example app\n   */\n  render() {\n    var fixtures = [\n      {label: 'Old Elbe Tunnel, Hamburg', location: {lat: 53.5459, lng: 9.966576}},\n      {label: 'Reeperbahn, Hamburg', location: {lat: 53.5495629, lng: 9.9625838}},\n      {label: 'Alster, Hamburg', location: {lat: 53.5610398, lng: 10.0259135}}\n    ];\n\n    return (\n      <div>\n        <Geosuggest\n          ref={el=>this._geoSuggest=el}\n          placeholder=\"Start typing!\"\n          initialValue=\"Hamburg\"\n          fixtures={fixtures}\n          onSuggestSelect={this.onSuggestSelect}\n          location={new google.maps.LatLng(53.558572, 9.9278215)}\n          radius=\"20\" />\n\n        {* Buttons to trigger exposed component functions *}\n        <button onClick={()=>this._geoSuggest.focus()}>Focus</button>\n        <button onClick={()=>this._geoSuggest.update('New Zealand')}>Update</button>\n        <button onClick={()=>this._geoSuggest.clear()}>Clear</button>\n        <button onClick={()=>this._geoSuggest.selectSuggest()}>Search</button>\n      </div>\n    )\n  }\n\n  /**\n   * When a suggest got selected\n   * @param  {Object} suggest The suggest\n   */\n  onSuggestSelect(suggest) {\n    console.log(suggest);\n  }\n});\n\nReactDOM.render(<App />, document.getElementById('app'));\n```\n\n## Styling\n\nThis component uses [BEM](http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/) for namespacing the CSS classes. So styling should be easy and without conflicts. See the [geosuggest.css](https://github.com/ubilabs/react-geosuggest/blob/master/src/geosuggest.css) for an example styling.\n\n### Note:\n\nThe `geosuggest__suggests--hidden` class is added to hide the suggestion list. You should copy the style below into your CSS file.\n```css\n.geosuggest__suggests--hidden {\n  max-height: 0;\n  overflow: hidden;\n  border-width: 0;\n}\n```\nThe above class is added whenever the suggestion list needs to be hidden. This occurs when the user selects an item from the list or when the user triggers the `blur` event on the input.\n\nSimilarly, you need to have the class `geosuggest__item--active` similar to this:\n```css\n.geosuggest__item--active {\n  background: #267dc0;\n  color: #fff;\n}\n```\nto see what item is selected, f.ex. when using the arrow keys to navigate the suggestion list.\n\n## Contributing\n\nIssues and pull requests are welcome!  \nPlease read the guidelines in [CONTRIBUTING.md](CONTRIBUTING.md) before starting to work on a PR.\n\n## License\n\nSee [LICENSE.md](LICENSE.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ubilabs/react-geosuggest.git"
  },
  "scripts": {
    "build:browser": "rimraf dist && rollup -c rollup.browser.config.js && cross-env NODE_ENV=production rollup -c rollup.browser.config.js",
    "build:example": "cross-env NODE_ENV=production rollup -c rollup.example.config.js",
    "build:module": "rimraf module && cross-env NODE_ENV=production rollup -c rollup.module.config.js && copyfiles -f src/geosuggest.css module/",
    "changelog": "conventional-changelog-generator && atom -w CHANGELOG.md",
    "copy:assets": "copyfiles -f example/src/*.html example/dist && copyfiles -f example/src/*.svg example/dist",
    "css": "nodecat example/src/app.css src/geosuggest.css > example/dist/app.css",
    "js:example": "rollup -c rollup.example.config.js",
    "js:prettier:ci": "prettier --config ./.prettierrc.yml --ignore-path ./.prettierignore --list-different \"**/**.{ts,tsx}\"",
    "js:prettier:fix": "prettier --config ./.prettierrc.yml --ignore-path ./.prettierignore --write \"**/**.{ts,tsx}\"",
    "lint": "tslint -c tslint.json ./src/*.tsx ./src/*.ts ./example/src/*.tsx ./test/*.jsx ./test/*.js ./test/fixtures",
    "posttest": "nyc report --reporter=text --reporter=lcov --reporter=html",
    "postversion": "git push && git push --tags && npm run publish:example",
    "prepare:example": "rimraf example/dist && mkdirp example/dist && npm run copy:assets && npm run js:example && npm run css",
    "prepublish": "npm run build:module",
    "pretest": "npm run js:prettier:ci && npm run lint",
    "preversion": "npm test",
    "publish:example": "npm run build:example && gh-pages -d example/dist",
    "release:major": "npm version major -m \"chore(release): version %s\"",
    "release:minor": "npm version minor -m \"chore(release): version %s\"",
    "release:patch": "npm version patch -m \"chore(release): version %s\"",
    "server": "npm run prepare:example && light-server -s example/dist -p 8000 -w 'src/*.tsx,src/*.ts,example/src/*.tsx,example/src/*.ts # npm run js:example' -w 'src/*.css,example/src/*.css # npm run css # reloadcss' -w 'example/src/*.html # npm run copy:assets # reload'",
    "start": "npm run server",
    "test": "nyc --include 'src/*' -e .tsx -s npm run unit-test",
    "unit-test": "mocha --require ts-node/register --require ./test/test_helper.ts \"test/**/*@(.ts|.tsx)\"",
    "version": "npm run build:browser && npm run changelog && git add ."
  },
  "version": "2.12.0"
}
