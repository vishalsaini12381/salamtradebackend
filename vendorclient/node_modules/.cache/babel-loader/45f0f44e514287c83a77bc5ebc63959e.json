{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar assign = require('object-assign');\n\nvar hasOwn = function (obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n\nfunction emptyFn() {}\n\nmodule.exports = React.createClass({\n  displayName: 'ReactCheckbox',\n  propTypes: {\n    nextValue: React.PropTypes.func,\n    onChange: React.PropTypes.func,\n    checked: React.PropTypes.any,\n    defaultChecked: React.PropTypes.any,\n    indeterminateValue: React.PropTypes.any,\n    supportIndeterminate: React.PropTypes.bool\n  },\n  getDefaultProps: function () {\n    return {\n      stopPropagation: true,\n      indeterminateValue: null,\n      supportIndeterminate: false,\n      nextValue: function (oldValue, props) {\n        return oldValue === props.indeterminateValue ? //indeterminate -> checked\n        true : oldValue === true ? // checked -> unchecked\n        false : // unchecked -> indeterminate\n        props.indeterminateValue;\n      }\n    };\n  },\n  getInitialState: function () {\n    return {\n      defaultChecked: this.props.defaultChecked\n    };\n  },\n  render: function () {\n    var props = this.prepareProps(this.props, this.state);\n    return React.createElement(\"input\", React.__spread({\n      type: \"checkbox\"\n    }, props, {\n      checked: this.isChecked()\n    }));\n  },\n  componentDidMount: function () {\n    this.checkIndeterminate();\n  },\n  componentDidUpdate: function () {\n    this.checkIndeterminate();\n  },\n  checkIndeterminate: function () {\n    if (this.props.supportIndeterminate) {\n      //it's not safe to store the prev indeterminate value\n      //and only set it if isIndeterminate is different from prev indeterminate value\n      //so we have to do this all the time\n      this.getDOMNode().indeterminate = this.isIndeterminate();\n    }\n  },\n  isIndeterminate: function () {\n    var props = this.props;\n    var checked = this.getValue();\n    var indeterminate = props.supportIndeterminate && checked === props.indeterminateValue;\n    return indeterminate === true;\n  },\n  prepareProps: function (thisProps, state) {\n    var props = {};\n    assign(props, thisProps);\n    props.onChange = this.handleChange;\n    return props;\n  },\n  getValue: function () {\n    var props = this.props;\n    return hasOwn(props, 'checked') ? props.checked : this.state.defaultChecked;\n  },\n  isChecked: function () {\n    return this.getValue() || false;\n  },\n  handleChange: function (event) {\n    var value = event.target.checked;\n    var props = this.props;\n\n    if (props.supportIndeterminate) {\n      var oldValue = this.getValue();\n\n      if (typeof props.nextValue == 'function') {\n        value = props.nextValue(oldValue, //  {\n        //     checked           : value,\n        //     oldValue          : oldValue,\n        //     indeterminateValue: props.indeterminateValue\n        // },\n        this.props);\n      }\n    }\n\n    ;\n    (props.onChange || emptyFn)(value, event);\n\n    if (!hasOwn(props, 'checked')) {\n      this.setState({\n        defaultChecked: value\n      });\n    }\n\n    props.stopPropagation && event.stopPropagation();\n  }\n});","map":null,"metadata":{},"sourceType":"script"}