{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMImg\n */\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar LocalEventTrapMixin = require(\"./LocalEventTrapMixin\");\n\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\n\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactDOM = require(\"./ReactDOM\"); // Store a reference to the <img> `ReactDOMComponent`. TODO: use string\n\n\nvar img = ReactElement.createFactory(ReactDOM.img.type);\n/**\n * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to\n * capture it on the <img> element itself. There are lots of hacks we could do\n * to accomplish this, but the most reliable is to make <img> a composite\n * component and use `componentDidMount` to attach the event handlers.\n */\n\nvar ReactDOMImg = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMImg',\n  tagName: 'IMG',\n  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],\n  render: function () {\n    return img(this.props);\n  },\n  componentDidMount: function () {\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');\n  }\n});\nmodule.exports = ReactDOMImg;","map":null,"metadata":{},"sourceType":"script"}