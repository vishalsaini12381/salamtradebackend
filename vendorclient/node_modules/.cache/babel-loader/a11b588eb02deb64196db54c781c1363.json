{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\n\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\n\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\n\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\n\nvar invariant = require(\"./invariant\"); // Store a reference to the <input> `ReactDOMComponent`. TODO: use string\n\n\nvar input = ReactElement.createFactory(ReactDOM.input.type);\nvar instancesByReactID = {};\n\nfunction forceUpdateIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.forceUpdate();\n  }\n}\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\n\n\nvar ReactDOMInput = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMInput',\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n  getInitialState: function () {\n    var defaultValue = this.props.defaultValue;\n    return {\n      initialChecked: this.props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null\n    };\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n    props.defaultChecked = null;\n    props.defaultValue = null;\n    var value = LinkedValueUtils.getValue(this);\n    props.value = value != null ? value : this.state.initialValue;\n    var checked = LinkedValueUtils.getChecked(this);\n    props.checked = checked != null ? checked : this.state.initialChecked;\n    props.onChange = this._handleChange;\n    return input(props, this.props.children);\n  },\n  componentDidMount: function () {\n    var id = ReactMount.getID(this.getDOMNode());\n    instancesByReactID[id] = this;\n  },\n  componentWillUnmount: function () {\n    var rootNode = this.getDOMNode();\n    var id = ReactMount.getID(rootNode);\n    delete instancesByReactID[id];\n  },\n  componentDidUpdate: function (prevProps, prevState, prevContext) {\n    var rootNode = this.getDOMNode();\n\n    if (this.props.checked != null) {\n      DOMPropertyOperations.setValueForProperty(rootNode, 'checked', this.props.checked || false);\n    }\n\n    var value = LinkedValueUtils.getValue(this);\n\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    } // Here we use asap to wait until all updates have propagated, which\n    // is important when using controlled components within layers:\n    // https://github.com/facebook/react/issues/1698\n\n\n    ReactUpdates.asap(forceUpdateIfMounted, this);\n    var name = this.props.name;\n\n    if (this.props.type === 'radio' && name != null) {\n      var rootNode = this.getDOMNode();\n      var queryRoot = rootNode;\n\n      while (queryRoot.parentNode) {\n        queryRoot = queryRoot.parentNode;\n      } // If `rootNode.form` was non-null, then we could try `form.elements`,\n      // but that sometimes behaves strangely in IE8. We could also try using\n      // `form.getElementsByName`, but that will only return direct children\n      // and won't include inputs that use the HTML5 `form=` attribute. Since\n      // the input might not even be in a form, let's just use the global\n      // `querySelectorAll` to ensure we don't miss anything.\n\n\n      var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n      for (var i = 0, groupLen = group.length; i < groupLen; i++) {\n        var otherNode = group[i];\n\n        if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n          continue;\n        }\n\n        var otherID = ReactMount.getID(otherNode);\n        \"production\" !== process.env.NODE_ENV ? invariant(otherID, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(otherID);\n        var otherInstance = instancesByReactID[otherID];\n        \"production\" !== process.env.NODE_ENV ? invariant(otherInstance, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(otherInstance); // If this is a controlled radio button group, forcing the input that\n        // was previously checked to update will cause it to be come re-checked\n        // as appropriate.\n\n        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n      }\n    }\n\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMInput;","map":null,"metadata":{},"sourceType":"script"}