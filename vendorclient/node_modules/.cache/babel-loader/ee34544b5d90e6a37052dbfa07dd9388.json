{"ast":null,"code":"/**\n * Parser\n */\nvar defaultNumberingSystem = {\n  'latn': {\n    '_digits': '0123456789',\n    '_type': 'numeric'\n  }\n};\nimport { isUndefined, getValue } from '../util';\nvar latnRegex = /^[0-9]*$/;\nvar defaultNumberSymbols = {\n  'decimal': '.',\n  'group': ',',\n  'percentSign': '%',\n  'plusSign': '+',\n  'minusSign': '-',\n  'infinity': 'âˆž',\n  'nan': 'NaN',\n  'exponential': 'E'\n};\nvar latnNumberSystem = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n/**\n * Interface for parser base\n * @private\n */\n\nvar ParserBase =\n/** @class */\nfunction () {\n  function ParserBase() {}\n  /**\n   * Returns the cldr object for the culture specifies\n   * @param {Object} obj - Specifies the object from which culture object to be acquired.\n   * @param {string} cName - Specifies the culture name.\n   * @returns {Object}\n   */\n\n\n  ParserBase.getMainObject = function (obj, cName) {\n    return getValue('main.' + cName, obj);\n  };\n  /**\n   * Returns the numbering system object from given cldr data.\n   * @param {Object} obj - Specifies the object from which number system is acquired.\n   * @returns {Object}\n   */\n\n\n  ParserBase.getNumberingSystem = function (obj) {\n    return getValue('supplemental.numberingSystems', obj) || this.numberingSystems;\n  };\n  /**\n   * Returns the reverse of given object keys or keys specified.\n   * @param {Object} prop - Specifies the object to be reversed.\n   * @param {number[]} keys - Optional parameter specifies the custom keyList for reversal.\n   * @returns {Object}\n   */\n\n\n  ParserBase.reverseObject = function (prop, keys) {\n    var propKeys = keys || Object.keys(prop);\n    var res = {};\n\n    for (var _i = 0, propKeys_1 = propKeys; _i < propKeys_1.length; _i++) {\n      var key = propKeys_1[_i];\n      /* tslint:disable no-any */\n\n      if (!res.hasOwnProperty(prop[key])) {\n        res[prop[key]] = key;\n      }\n    }\n\n    return res;\n  };\n  /**\n   * Returns the symbol regex by skipping the escape sequence.\n   * @param {string[]} props - Specifies the array values to be skipped.\n   * @returns {RegExp}\n   */\n\n\n  ParserBase.getSymbolRegex = function (props) {\n    var regexStr = props.map(function (str) {\n      return str.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n    }).join('|');\n    return new RegExp(regexStr, 'g');\n  };\n\n  ParserBase.getSymbolMatch = function (prop) {\n    var matchKeys = Object.keys(defaultNumberSymbols);\n    var ret = {};\n\n    for (var _i = 0, matchKeys_1 = matchKeys; _i < matchKeys_1.length; _i++) {\n      var key = matchKeys_1[_i];\n      ret[prop[key]] = defaultNumberSymbols[key];\n    }\n\n    return ret;\n  };\n  /**\n   * Returns regex string for provided value\n   * @param {string} val\n   * @returns {string}\n   */\n\n\n  ParserBase.constructRegex = function (val) {\n    var len = val.length;\n    var ret = '';\n\n    for (var i = 0; i < len; i++) {\n      if (i !== len - 1) {\n        ret += val[i] + '|';\n      } else {\n        ret += val[i];\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns the replaced value of matching regex and obj mapper.\n   * @param {string} value - Specifies the  values to be replaced.\n   * @param {RegExp} regex - Specifies the  regex to search.\n   * @param {Object} obj - Specifies the  object matcher to be replace value parts.\n   * @returns {string}\n   */\n\n\n  ParserBase.convertValueParts = function (value, regex, obj) {\n    return value.replace(regex, function (str) {\n      return obj[str];\n    });\n  };\n  /**\n   * Returns default numbering system object for formatting from cldr data\n   * @param {Object} obj\n   * @returns {NumericObject}\n   */\n\n\n  ParserBase.getDefaultNumberingSystem = function (obj) {\n    var ret = {};\n    ret.obj = getValue('numbers', obj);\n    ret.nSystem = getValue('defaultNumberingSystem', ret.obj);\n    return ret;\n  };\n  /**\n   * Returns the replaced value of matching regex and obj mapper.\n   */\n\n\n  ParserBase.getCurrentNumericOptions = function (curObj, numberSystem, needSymbols) {\n    var ret = {};\n    var cur = this.getDefaultNumberingSystem(curObj);\n\n    if (!isUndefined(cur.nSystem)) {\n      var digits = getValue(cur.nSystem + '._digits', numberSystem);\n\n      if (!isUndefined(digits)) {\n        ret.numericPair = this.reverseObject(digits, latnNumberSystem);\n        ret.numberParseRegex = new RegExp(this.constructRegex(digits), 'g');\n        ret.numericRegex = '[' + digits[0] + '-' + digits[9] + ']';\n\n        if (needSymbols) {\n          ret.numericRegex = digits[0] + '-' + digits[9];\n          ret.symbolNumberSystem = getValue('symbols-numberSystem-' + cur.nSystem, cur.obj);\n          ret.symbolMatch = this.getSymbolMatch(ret.symbolNumberSystem);\n          ret.numberSystem = cur.nSystem;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns number mapper object for the provided cldr data\n   * @param {Object} curObj\n   * @param {Object} numberSystem\n   * @param {boolean} isNumber\n   * @returns {NumberMapper}\n   */\n\n\n  ParserBase.getNumberMapper = function (curObj, numberSystem, isNumber) {\n    var ret = {\n      mapper: {}\n    };\n    var cur = this.getDefaultNumberingSystem(curObj);\n\n    if (!isUndefined(cur.nSystem)) {\n      ret.numberSystem = cur.nSystem;\n      ret.numberSymbols = getValue('symbols-numberSystem-' + cur.nSystem, cur.obj);\n      ret.timeSeparator = getValue('timeSeparator', ret.numberSymbols);\n      var digits = getValue(cur.nSystem + '._digits', numberSystem);\n\n      if (!isUndefined(digits)) {\n        for (var _i = 0, latnNumberSystem_1 = latnNumberSystem; _i < latnNumberSystem_1.length; _i++) {\n          var i = latnNumberSystem_1[_i];\n          ret.mapper[i] = digits[i];\n        }\n      }\n    }\n\n    return ret;\n  };\n\n  ParserBase.nPair = 'numericPair';\n  ParserBase.nRegex = 'numericRegex';\n  ParserBase.numberingSystems = defaultNumberingSystem;\n  return ParserBase;\n}();\n\nexport { ParserBase };","map":null,"metadata":{},"sourceType":"module"}