{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactSelect = _interopRequireDefault(require(\"react-select\"));\n\nvar _theme = require(\"react-select/lib/theme\");\n\nvar _CheckboxGroup = _interopRequireWildcard(require(\"./CheckboxGroup\"));\n\nvar _CheckboxOption = _interopRequireDefault(require(\"./CheckboxOption\"));\n\nvar _ChevronDown = _interopRequireDefault(require(\"./ChevronDown\"));\n\nvar _Dropdown = _interopRequireDefault(require(\"./Dropdown\"));\n\nvar _DropdownButton = _interopRequireWildcard(require(\"./DropdownButton\"));\n\nvar _DropdownIndicator = _interopRequireDefault(require(\"./DropdownIndicator\"));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar countOptions = function countOptions(opts) {\n  if (!opts || !Array.isArray(opts)) return 0;\n  return opts.reduce(function (acc, o) {\n    return acc + (o.options ? countOptions(o.options) : 1);\n  }, 0);\n};\n\nvar defaultStyles = {\n  control: function control(provided) {\n    return _objectSpread({}, provided, {\n      minWidth: 240,\n      margin: 8\n    });\n  },\n  menu: function menu() {\n    return {\n      boxShadow: 'inset 0 1px 0 rgba(0, 0, 0, 0.1)'\n    };\n  },\n  groupHeading: function groupHeading(def, opts) {\n    var provided = _objectSpread({}, def, {\n      marginBottom: 0,\n      padding: '8px 12px 4px',\n      fontSize: '110%',\n      // textTransform: undefined,\n      display: 'flex',\n      alignItems: 'center'\n    });\n\n    if (opts.checked) {\n      return _objectSpread({}, provided, {\n        backgroundColor: _theme.colors.primary50,\n        color: _theme.colors.neutral80\n      });\n    }\n\n    if (opts.indeterminate) {\n      return _objectSpread({}, provided, {\n        backgroundColor: _theme.colors.primary25\n      });\n    }\n\n    return _objectSpread({}, provided, {\n      ':hover': {\n        backgroundColor: _theme.colors.primary25\n      }\n    });\n  },\n  group: function group(provided) {\n    return _objectSpread({}, provided, {\n      padding: 0\n    });\n  },\n  dropdownButton: function dropdownButton(baseProvided, opts) {\n    var provided = _objectSpread({}, baseProvided);\n\n    ['width', 'maxWidth', 'minWidth'].forEach(function (widthProp) {\n      if (opts[widthProp]) {\n        provided[widthProp] = opts[widthProp];\n      }\n    });\n\n    if (opts.isOpen) {\n      return _objectSpread({}, provided, {\n        background: _theme.colors.neutral3\n      });\n    }\n\n    return provided;\n  },\n  option: function option(provided, opts) {\n    if (opts.isSelected) {\n      return _objectSpread({}, provided, {\n        color: '#000',\n        backgroundColor: _theme.colors.primary50,\n        fontWeight: 'bold',\n        minWidth: 240\n      });\n    }\n\n    return _objectSpread({}, provided, {\n      backgroundColor: 'transparent',\n      minWidth: 240,\n      ':hover': {\n        backgroundColor: _theme.colors.primary25\n      }\n    });\n  }\n};\nvar defaultComponents = {\n  // these three components pertain to react-multiselect-checkboxes\n  Dropdown: _Dropdown.default,\n  DropdownButton: _DropdownButton.default,\n  DropdownButtonIcon: _ChevronDown.default,\n  // these are react-select components, with sane defaults for react-multiselect-checkboxes\n  DropdownIndicator: _DropdownIndicator.default,\n  IndicatorSeparator: null,\n  Option: _CheckboxOption.default,\n  GroupHeading: _CheckboxGroup.CheckboxGroupHeading,\n  Group: _CheckboxGroup.default\n};\n\nvar valueShape = _propTypes.default.shape({\n  value: _propTypes.default.any,\n  label: _propTypes.default.string,\n  options: _propTypes.default.array\n});\n\nvar ReactMultiselectCheckboxes =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReactMultiselectCheckboxes, _Component);\n\n  function ReactMultiselectCheckboxes() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ReactMultiselectCheckboxes);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ReactMultiselectCheckboxes)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      isOpen: false,\n      value: undefined,\n      inputValue: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSelectChange\", function (value) {\n      var _this$props; // this.toggleOpen();\n\n\n      _this.setState({\n        value: value\n      });\n\n      for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        rest[_key2 - 1] = arguments[_key2];\n      }\n\n      (_this$props = _this.props).onChange.apply(_this$props, [value].concat(rest));\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onInputChange\", function (inputValue, event) {\n      if (_this.props.onInputChange) {\n        var _this$props2;\n\n        for (var _len3 = arguments.length, restArgs = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n          restArgs[_key3 - 2] = arguments[_key3];\n        }\n\n        (_this$props2 = _this.props).onInputChange.apply(_this$props2, [inputValue, event].concat(restArgs));\n      }\n\n      switch (event.action) {\n        case 'input-change':\n          _this.setState({\n            inputValue: inputValue\n          });\n\n          break;\n\n        case 'menu-close':\n          _this.setState({\n            inputValue: ''\n          });\n\n          break;\n\n        default:\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"toggleOpen\", function () {\n      _this.setState(function (state) {\n        return {\n          isOpen: !state.isOpen\n        };\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ReactMultiselectCheckboxes, [{\n    key: \"calcStyles\",\n    value: function calcStyles() {\n      // This is messy, but conceptually simple. We're just replacing react-select's defaults\n      // with the defaults from defaultStyles for user-provided style functions.\n      var propsStyles = _objectSpread({}, this.props.styles);\n\n      Object.entries(defaultStyles).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            k = _ref2[0],\n            defaultFunc = _ref2[1];\n\n        if (propsStyles[k]) {\n          var passedInStyleFunc = propsStyles[k];\n\n          propsStyles[k] = function (provided, selectState) {\n            return passedInStyleFunc(defaultFunc(provided, selectState), selectState);\n          };\n        } else {\n          propsStyles[k] = defaultFunc;\n        }\n      });\n      return propsStyles;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          getDropdownButtonLabel = _this$props3.getDropdownButtonLabel,\n          placeholderButtonLabel = _this$props3.placeholderButtonLabel,\n          propsComponents = _this$props3.components,\n          propsStyles = _this$props3.styles,\n          menuIsOpen = _this$props3.menuIsOpen,\n          rightAligned = _this$props3.rightAligned,\n          onChange = _this$props3.onChange,\n          width = _this$props3.width,\n          minWidth = _this$props3.minWidth,\n          maxWidth = _this$props3.maxWidth,\n          propsValue = _this$props3.value,\n          hideSearch = _this$props3.hideSearch,\n          minItemsForSearch = _this$props3.minItemsForSearch,\n          options = _this$props3.options,\n          resetInputOnSelect = _this$props3.resetInputOnSelect,\n          onInputChange = _this$props3.onInputChange,\n          rest = _objectWithoutProperties(_this$props3, [\"getDropdownButtonLabel\", \"placeholderButtonLabel\", \"components\", \"styles\", \"menuIsOpen\", \"rightAligned\", \"onChange\", \"width\", \"minWidth\", \"maxWidth\", \"value\", \"hideSearch\", \"minItemsForSearch\", \"options\", \"resetInputOnSelect\", \"onInputChange\"]);\n\n      var components = _objectSpread({}, defaultComponents, propsComponents);\n\n      if (hideSearch || countOptions(options) < minItemsForSearch) {\n        components.Control = function () {\n          return null;\n        };\n      }\n\n      var styles = this.calcStyles();\n      var isOpen = typeof menuIsOpen === 'boolean' ? menuIsOpen : this.state.isOpen;\n      var value = propsValue || this.state.value;\n      var inputValueIfDefined = resetInputOnSelect ? {} : {\n        inputValue: this.state.inputValue\n      };\n      return _react.default.createElement(components.Dropdown, {\n        isOpen: isOpen,\n        rightAligned: rightAligned,\n        onClose: this.toggleOpen,\n        target: _react.default.createElement(components.DropdownButton, {\n          iconAfter: _react.default.createElement(components.DropdownButtonIcon, null),\n          onPress: this.toggleOpen,\n          isSelected: isOpen,\n          style: styles.dropdownButton(_DropdownButton.defaultDropdownButtonStyle, {\n            value: value,\n            isOpen: isOpen,\n            width: width,\n            minWidth: minWidth,\n            maxWidth: maxWidth\n          })\n        }, getDropdownButtonLabel({\n          placeholderButtonLabel: placeholderButtonLabel,\n          value: value\n        }))\n      }, _react.default.createElement(_reactSelect.default, _extends({\n        autoFocus: true,\n        isMulti: true,\n        closeMenuOnSelect: false,\n        backspaceRemovesValue: false,\n        components: components,\n        controlShouldRenderValue: false,\n        hideSelectedOptions: false,\n        isClearable: false,\n        menuIsOpen: true,\n        onChange: this.onSelectChange,\n        placeholder: \"Search...\",\n        styles: styles,\n        tabSelectsValue: false,\n        value: value,\n        options: options,\n        onInputChange: this.onInputChange,\n        inputValue: this.state.inputValue,\n        isSearchable: true\n      }, rest)));\n    }\n  }]);\n\n  return ReactMultiselectCheckboxes;\n}(_react.Component);\n\nexports.default = ReactMultiselectCheckboxes;\n\n_defineProperty(ReactMultiselectCheckboxes, \"propTypes\", {\n  components: _propTypes.default.shape({\n    Dropdown: _propTypes.default.func,\n    DropdownButton: _propTypes.default.func,\n    DropdownButtonIcon: _propTypes.default.func\n  }),\n  options: _propTypes.default.arrayOf(valueShape).isRequired,\n  styles: _propTypes.default.objectOf(_propTypes.default.func),\n  placeholderButtonLabel: _propTypes.default.string,\n  getDropdownButtonLabel: _propTypes.default.func,\n  onChange: _propTypes.default.func,\n  menuIsOpen: _propTypes.default.bool,\n  rightAligned: _propTypes.default.bool,\n  width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n  minWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n  maxWidth: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n  value: _propTypes.default.oneOfType([valueShape, _propTypes.default.arrayOf(valueShape)]),\n  hideSearch: _propTypes.default.bool,\n  minItemsForSearch: _propTypes.default.number,\n  resetInputOnSelect: _propTypes.default.bool,\n  onInputChange: _propTypes.default.func\n});\n\n_defineProperty(ReactMultiselectCheckboxes, \"defaultProps\", {\n  menuIsOpen: undefined,\n  components: {},\n  styles: {},\n  placeholderButtonLabel: 'Select...',\n  onChange: function onChange() {},\n  getDropdownButtonLabel: function getDropdownButtonLabel(_ref3) {\n    var placeholderButtonLabel = _ref3.placeholderButtonLabel,\n        value = _ref3.value;\n\n    if (!value) {\n      return placeholderButtonLabel;\n    }\n\n    if (Array.isArray(value)) {\n      if (value.length === 0) {\n        return placeholderButtonLabel;\n      }\n\n      if (value.length === 1) {\n        return value[0].label;\n      }\n\n      return \"\".concat(value.length, \" selected\");\n    }\n\n    return value.label;\n  },\n  rightAligned: false,\n  width: null,\n  minWidth: null,\n  maxWidth: null,\n  value: null,\n  hideSearch: false,\n  minItemsForSearch: 0,\n  resetInputOnSelect: false,\n  onInputChange: function onInputChange() {}\n});","map":null,"metadata":{},"sourceType":"script"}