{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SimpleEventPlugin\n */\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar EventPluginUtils = require(\"./EventPluginUtils\");\n\nvar EventPropagators = require(\"./EventPropagators\");\n\nvar SyntheticClipboardEvent = require(\"./SyntheticClipboardEvent\");\n\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar SyntheticFocusEvent = require(\"./SyntheticFocusEvent\");\n\nvar SyntheticKeyboardEvent = require(\"./SyntheticKeyboardEvent\");\n\nvar SyntheticMouseEvent = require(\"./SyntheticMouseEvent\");\n\nvar SyntheticDragEvent = require(\"./SyntheticDragEvent\");\n\nvar SyntheticTouchEvent = require(\"./SyntheticTouchEvent\");\n\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");\n\nvar SyntheticWheelEvent = require(\"./SyntheticWheelEvent\");\n\nvar getEventCharCode = require(\"./getEventCharCode\");\n\nvar invariant = require(\"./invariant\");\n\nvar keyOf = require(\"./keyOf\");\n\nvar warning = require(\"./warning\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar eventTypes = {\n  blur: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onBlur: true\n      }),\n      captured: keyOf({\n        onBlurCapture: true\n      })\n    }\n  },\n  click: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onClick: true\n      }),\n      captured: keyOf({\n        onClickCapture: true\n      })\n    }\n  },\n  contextMenu: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onContextMenu: true\n      }),\n      captured: keyOf({\n        onContextMenuCapture: true\n      })\n    }\n  },\n  copy: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCopy: true\n      }),\n      captured: keyOf({\n        onCopyCapture: true\n      })\n    }\n  },\n  cut: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCut: true\n      }),\n      captured: keyOf({\n        onCutCapture: true\n      })\n    }\n  },\n  doubleClick: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onDoubleClick: true\n      }),\n      captured: keyOf({\n        onDoubleClickCapture: true\n      })\n    }\n  },\n  drag: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onDrag: true\n      }),\n      captured: keyOf({\n        onDragCapture: true\n      })\n    }\n  },\n  dragEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onDragEnd: true\n      }),\n      captured: keyOf({\n        onDragEndCapture: true\n      })\n    }\n  },\n  dragEnter: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onDragEnter: true\n      }),\n      captured: keyOf({\n        onDragEnterCapture: true\n      })\n    }\n  },\n  dragExit: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onDragExit: true\n      }),\n      captured: keyOf({\n        onDragExitCapture: true\n      })\n    }\n  },\n  dragLeave: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onDragLeave: true\n      }),\n      captured: keyOf({\n        onDragLeaveCapture: true\n      })\n    }\n  },\n  dragOver: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onDragOver: true\n      }),\n      captured: keyOf({\n        onDragOverCapture: true\n      })\n    }\n  },\n  dragStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onDragStart: true\n      }),\n      captured: keyOf({\n        onDragStartCapture: true\n      })\n    }\n  },\n  drop: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onDrop: true\n      }),\n      captured: keyOf({\n        onDropCapture: true\n      })\n    }\n  },\n  focus: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onFocus: true\n      }),\n      captured: keyOf({\n        onFocusCapture: true\n      })\n    }\n  },\n  input: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onInput: true\n      }),\n      captured: keyOf({\n        onInputCapture: true\n      })\n    }\n  },\n  keyDown: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onKeyDown: true\n      }),\n      captured: keyOf({\n        onKeyDownCapture: true\n      })\n    }\n  },\n  keyPress: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onKeyPress: true\n      }),\n      captured: keyOf({\n        onKeyPressCapture: true\n      })\n    }\n  },\n  keyUp: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onKeyUp: true\n      }),\n      captured: keyOf({\n        onKeyUpCapture: true\n      })\n    }\n  },\n  load: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onLoad: true\n      }),\n      captured: keyOf({\n        onLoadCapture: true\n      })\n    }\n  },\n  error: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onError: true\n      }),\n      captured: keyOf({\n        onErrorCapture: true\n      })\n    }\n  },\n  // Note: We do not allow listening to mouseOver events. Instead, use the\n  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.\n  mouseDown: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onMouseDown: true\n      }),\n      captured: keyOf({\n        onMouseDownCapture: true\n      })\n    }\n  },\n  mouseMove: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onMouseMove: true\n      }),\n      captured: keyOf({\n        onMouseMoveCapture: true\n      })\n    }\n  },\n  mouseOut: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onMouseOut: true\n      }),\n      captured: keyOf({\n        onMouseOutCapture: true\n      })\n    }\n  },\n  mouseOver: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onMouseOver: true\n      }),\n      captured: keyOf({\n        onMouseOverCapture: true\n      })\n    }\n  },\n  mouseUp: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onMouseUp: true\n      }),\n      captured: keyOf({\n        onMouseUpCapture: true\n      })\n    }\n  },\n  paste: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onPaste: true\n      }),\n      captured: keyOf({\n        onPasteCapture: true\n      })\n    }\n  },\n  reset: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onReset: true\n      }),\n      captured: keyOf({\n        onResetCapture: true\n      })\n    }\n  },\n  scroll: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onScroll: true\n      }),\n      captured: keyOf({\n        onScrollCapture: true\n      })\n    }\n  },\n  submit: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onSubmit: true\n      }),\n      captured: keyOf({\n        onSubmitCapture: true\n      })\n    }\n  },\n  touchCancel: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onTouchCancel: true\n      }),\n      captured: keyOf({\n        onTouchCancelCapture: true\n      })\n    }\n  },\n  touchEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onTouchEnd: true\n      }),\n      captured: keyOf({\n        onTouchEndCapture: true\n      })\n    }\n  },\n  touchMove: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onTouchMove: true\n      }),\n      captured: keyOf({\n        onTouchMoveCapture: true\n      })\n    }\n  },\n  touchStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onTouchStart: true\n      }),\n      captured: keyOf({\n        onTouchStartCapture: true\n      })\n    }\n  },\n  wheel: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onWheel: true\n      }),\n      captured: keyOf({\n        onWheelCapture: true\n      })\n    }\n  }\n};\nvar topLevelEventsToDispatchConfig = {\n  topBlur: eventTypes.blur,\n  topClick: eventTypes.click,\n  topContextMenu: eventTypes.contextMenu,\n  topCopy: eventTypes.copy,\n  topCut: eventTypes.cut,\n  topDoubleClick: eventTypes.doubleClick,\n  topDrag: eventTypes.drag,\n  topDragEnd: eventTypes.dragEnd,\n  topDragEnter: eventTypes.dragEnter,\n  topDragExit: eventTypes.dragExit,\n  topDragLeave: eventTypes.dragLeave,\n  topDragOver: eventTypes.dragOver,\n  topDragStart: eventTypes.dragStart,\n  topDrop: eventTypes.drop,\n  topError: eventTypes.error,\n  topFocus: eventTypes.focus,\n  topInput: eventTypes.input,\n  topKeyDown: eventTypes.keyDown,\n  topKeyPress: eventTypes.keyPress,\n  topKeyUp: eventTypes.keyUp,\n  topLoad: eventTypes.load,\n  topMouseDown: eventTypes.mouseDown,\n  topMouseMove: eventTypes.mouseMove,\n  topMouseOut: eventTypes.mouseOut,\n  topMouseOver: eventTypes.mouseOver,\n  topMouseUp: eventTypes.mouseUp,\n  topPaste: eventTypes.paste,\n  topReset: eventTypes.reset,\n  topScroll: eventTypes.scroll,\n  topSubmit: eventTypes.submit,\n  topTouchCancel: eventTypes.touchCancel,\n  topTouchEnd: eventTypes.touchEnd,\n  topTouchMove: eventTypes.touchMove,\n  topTouchStart: eventTypes.touchStart,\n  topWheel: eventTypes.wheel\n};\n\nfor (var topLevelType in topLevelEventsToDispatchConfig) {\n  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];\n}\n\nvar SimpleEventPlugin = {\n  eventTypes: eventTypes,\n\n  /**\n   * Same as the default implementation, except cancels the event when return\n   * value is false. This behavior will be disabled in a future release.\n   *\n   * @param {object} Event to be dispatched.\n   * @param {function} Application-level callback.\n   * @param {string} domID DOM ID to pass to the callback.\n   */\n  executeDispatch: function (event, listener, domID) {\n    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);\n    \"production\" !== process.env.NODE_ENV ? warning(typeof returnValue !== 'boolean', 'Returning `false` from an event handler is deprecated and will be ' + 'ignored in a future release. Instead, manually call ' + 'e.stopPropagation() or e.preventDefault(), as appropriate.') : null;\n\n    if (returnValue === false) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  },\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];\n\n    if (!dispatchConfig) {\n      return null;\n    }\n\n    var EventConstructor;\n\n    switch (topLevelType) {\n      case topLevelTypes.topInput:\n      case topLevelTypes.topLoad:\n      case topLevelTypes.topError:\n      case topLevelTypes.topReset:\n      case topLevelTypes.topSubmit:\n        // HTML Events\n        // @see http://www.w3.org/TR/html5/index.html#events-0\n        EventConstructor = SyntheticEvent;\n        break;\n\n      case topLevelTypes.topKeyPress:\n        // FireFox creates a keypress event for function keys too. This removes\n        // the unwanted keypress events. Enter is however both printable and\n        // non-printable. One would expect Tab to be as well (but it isn't).\n        if (getEventCharCode(nativeEvent) === 0) {\n          return null;\n        }\n\n      /* falls through */\n\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        EventConstructor = SyntheticKeyboardEvent;\n        break;\n\n      case topLevelTypes.topBlur:\n      case topLevelTypes.topFocus:\n        EventConstructor = SyntheticFocusEvent;\n        break;\n\n      case topLevelTypes.topClick:\n        // Firefox creates a click event on right mouse clicks. This removes the\n        // unwanted click events.\n        if (nativeEvent.button === 2) {\n          return null;\n        }\n\n      /* falls through */\n\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topDoubleClick:\n      case topLevelTypes.topMouseDown:\n      case topLevelTypes.topMouseMove:\n      case topLevelTypes.topMouseOut:\n      case topLevelTypes.topMouseOver:\n      case topLevelTypes.topMouseUp:\n        EventConstructor = SyntheticMouseEvent;\n        break;\n\n      case topLevelTypes.topDrag:\n      case topLevelTypes.topDragEnd:\n      case topLevelTypes.topDragEnter:\n      case topLevelTypes.topDragExit:\n      case topLevelTypes.topDragLeave:\n      case topLevelTypes.topDragOver:\n      case topLevelTypes.topDragStart:\n      case topLevelTypes.topDrop:\n        EventConstructor = SyntheticDragEvent;\n        break;\n\n      case topLevelTypes.topTouchCancel:\n      case topLevelTypes.topTouchEnd:\n      case topLevelTypes.topTouchMove:\n      case topLevelTypes.topTouchStart:\n        EventConstructor = SyntheticTouchEvent;\n        break;\n\n      case topLevelTypes.topScroll:\n        EventConstructor = SyntheticUIEvent;\n        break;\n\n      case topLevelTypes.topWheel:\n        EventConstructor = SyntheticWheelEvent;\n        break;\n\n      case topLevelTypes.topCopy:\n      case topLevelTypes.topCut:\n      case topLevelTypes.topPaste:\n        EventConstructor = SyntheticClipboardEvent;\n        break;\n    }\n\n    \"production\" !== process.env.NODE_ENV ? invariant(EventConstructor, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(EventConstructor);\n    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent);\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n    return event;\n  }\n};\nmodule.exports = SimpleEventPlugin;","map":null,"metadata":{},"sourceType":"script"}