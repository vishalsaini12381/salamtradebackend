{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMOption\n */\n\"use strict\";\n\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\n\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar warning = require(\"./warning\"); // Store a reference to the <option> `ReactDOMComponent`. TODO: use string\n\n\nvar option = ReactElement.createFactory(ReactDOM.option.type);\n/**\n * Implements an <option> native component that warns when `selected` is set.\n */\n\nvar ReactDOMOption = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMOption',\n  mixins: [ReactBrowserComponentMixin],\n  componentWillMount: function () {\n    // TODO (yungsters): Remove support for `selected` in <option>.\n    if (\"production\" !== process.env.NODE_ENV) {\n      \"production\" !== process.env.NODE_ENV ? warning(this.props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : null;\n    }\n  },\n  render: function () {\n    return option(this.props, this.props.children);\n  }\n});\nmodule.exports = ReactDOMOption;","map":null,"metadata":{},"sourceType":"script"}