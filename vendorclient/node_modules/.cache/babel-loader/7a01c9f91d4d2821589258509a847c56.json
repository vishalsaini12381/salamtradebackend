{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule deprecated\n */\nvar assign = require(\"./Object.assign\");\n\nvar warning = require(\"./warning\");\n/**\n * This will log a single deprecation notice per function and forward the call\n * on to the new API.\n *\n * @param {string} namespace The namespace of the call, eg 'React'\n * @param {string} oldName The old function name, eg 'renderComponent'\n * @param {string} newName The new function name, eg 'render'\n * @param {*} ctx The context this forwarded call should run in\n * @param {function} fn The function to forward on to\n * @return {*} Will be the value as returned from `fn`\n */\n\n\nfunction deprecated(namespace, oldName, newName, ctx, fn) {\n  var warned = false;\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    var newFn = function () {\n      \"production\" !== process.env.NODE_ENV ? warning(warned, namespace + \".\" + oldName + \" will be deprecated in a future version. \" + (\"Use \" + namespace + \".\" + newName + \" instead.\")) : null;\n      warned = true;\n      return fn.apply(ctx, arguments);\n    };\n\n    newFn.displayName = namespace + \"_\" + oldName; // We need to make sure all properties of the original fn are copied over.\n    // In particular, this is needed to support PropTypes\n\n    return assign(newFn, fn);\n  }\n\n  return fn;\n}\n\nmodule.exports = deprecated;","map":null,"metadata":{},"sourceType":"script"}