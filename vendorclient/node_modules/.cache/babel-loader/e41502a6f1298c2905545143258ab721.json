{"ast":null,"code":"var _jsxFileName = \"/home/shivendra/Desktop/techoffice/salamvendor/vendorclient/src/map.js\";\n// import React from 'react';\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n// import { classnames } from './helpers';\n// class SearchBar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       address: '',\n//       errorMessage: '',\n//       latitude: null,\n//       longitude: null,\n//       isGeocoding: false,\n//     };\n//   }\n//   handleChange = address => {\n//     this.setState({\n//       address,\n//       latitude: null,\n//       longitude: null,\n//       errorMessage: '',\n//     });\n//   };\n//   handleSelect = selected => {\n//     this.setState({ isGeocoding: true, address: selected });\n//     geocodeByAddress(selected)\n//       .then(res => getLatLng(res[0]))\n//       .then(({ lat, lng }) => {\n//         this.setState({\n//           latitude: lat,\n//           longitude: lng,\n//           isGeocoding: false,\n//         });\n//       })\n//       .catch(error => {\n//         this.setState({ isGeocoding: false });\n//         console.log('error', error); // eslint-disable-line no-console\n//       });\n//   };\n//   handleCloseClick = () => {\n//     this.setState({\n//       address: '',\n//       latitude: null,\n//       longitude: null,\n//     });\n//   };\n//   handleError = (status, clearSuggestions) => {\n//     console.log('Error from Google Maps API', status); // eslint-disable-line no-console\n//     this.setState({ errorMessage: status }, () => {\n//       clearSuggestions();\n//     });\n//   };\n//   render() {\n//     const {\n//       address,\n//       errorMessage,\n//       latitude,\n//       longitude,\n//       isGeocoding,\n//     } = this.state;\n//     return (\n//       <div>\n//         <PlacesAutocomplete\n//           onChange={this.handleChange}\n//           value={address}\n//           onSelect={this.handleSelect}\n//           onError={this.handleError}\n//           shouldFetchSuggestions={address.length > 2}\n//         >\n//           {({ getInputProps, suggestions, getSuggestionItemProps }) => {\n//             return (\n//               <div className=\"Demo__search-bar-container\">\n//                 <div className=\"Demo__search-input-container\">\n//                   <input\n//                     {...getInputProps({\n//                       placeholder: 'Search Places...',\n//                       className: 'Demo__search-input',\n//                     })}\n//                   />\n//                   {this.state.address.length > 0 && (\n//                     <button\n//                       className=\"Demo__clear-button\"\n//                       onClick={this.handleCloseClick}\n//                     >\n//                       x\n//                     </button>\n//                   )}\n//                 </div>\n//                 {suggestions.length > 0 && (\n//                   <div className=\"Demo__autocomplete-container\">\n//                     {suggestions.map(suggestion => {\n//                       const className = classnames('Demo__suggestion-item', {\n//                         'Demo__suggestion-item--active': suggestion.active,\n//                       });\n//                       return (\n//                         /* eslint-disable react/jsx-key */\n//                         <div\n//                           {...getSuggestionItemProps(suggestion, { className })}\n//                         >\n//                           <strong>\n//                             {suggestion.formattedSuggestion.mainText}\n//                           </strong>{' '}\n//                           <small>\n//                             {suggestion.formattedSuggestion.secondaryText}\n//                           </small>\n//                         </div>\n//                       );\n//                       /* eslint-enable react/jsx-key */\n//                     })}\n//                     <div className=\"Demo__dropdown-footer\">\n//                       <div>\n//                         <img\n//                         //   src={require('../images/powered_by_google_default.png')}\n//                           className=\"Demo__dropdown-footer-image\"\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           }}\n//         </PlacesAutocomplete>\n//         {errorMessage.length > 0 && (\n//           <div className=\"Demo__error-message\">{this.state.errorMessage}</div>\n//         )}\n//         {((latitude && longitude) || isGeocoding) && (\n//           <div>\n//             <h3 className=\"Demo__geocode-result-header\">Geocode result</h3>\n//             {isGeocoding ? (\n//               <div>\n//                 <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw Demo__spinner\" />\n//               </div>\n//             ) : (\n//               <div>\n//                 <div className=\"Demo__geocode-result-item--lat\">\n//                   <label>Latitude:</label>\n//                   <span>{latitude}</span>\n//                 </div>\n//                 <div className=\"Demo__geocode-result-item--lng\">\n//                   <label>Longitude:</label>\n//                   <span>{longitude}</span>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n//   );\n//   }\n// }\n// export default SearchBar;\nconst _React = React,\n      Component = _React.Component,\n      Children = _React.Children,\n      PropTypes = _React.PropTypes;\nconst _Selectly = Selectly,\n      Select = _Selectly.Select,\n      Option = _Selectly.Option,\n      utils = _Selectly.utils;\nconst getToggledOptions = utils.getToggledOptions;\n\nclass CheckboxOption extends Component {\n  render() {\n    const _this$props = this.props,\n          value = _this$props.value,\n          isChecked = _this$props.isChecked,\n          children = _this$props.children;\n    return React.createElement(Option, {\n      className: \"react-select-option\",\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      className: \"react-select-option__checkbox\",\n      defaultValue: null,\n      checked: isChecked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"react-select-option__label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, children));\n  }\n\n}\n\nclass CheckboxMultiSelect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      defaultValue: 'Select a color',\n      currentValues: []\n    };\n    this._handleChange = this._handleChange.bind(this);\n  }\n\n  _handleChange(value) {\n    this.setState({\n      currentValues: getToggledOptions(this.state.currentValues, value)\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          defaultValue = _this$state.defaultValue,\n          currentValues = _this$state.currentValues;\n    return React.createElement(Select, {\n      classPrefix: \"react-select\",\n      multiple: true,\n      onChange: this._handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"react-select-trigger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, currentValues.length > 0 ? currentValues.join(', ') : defaultValue), React.createElement(\"div\", {\n      className: \"react-select-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"react-select-options\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(CheckboxOption, {\n      value: \"red\",\n      isChecked: currentValues.indexOf('red') > -1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Red\"), React.createElement(CheckboxOption, {\n      value: \"green\",\n      isChecked: currentValues.indexOf('green') > -1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Green\"), React.createElement(CheckboxOption, {\n      value: \"blue\",\n      isChecked: currentValues.indexOf('blue') > -1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Blue\"))));\n  }\n\n}\n\nexport default First;","map":{"version":3,"sources":["/home/shivendra/Desktop/techoffice/salamvendor/vendorclient/src/map.js"],"names":["React","Component","Children","PropTypes","Selectly","Select","Option","utils","getToggledOptions","CheckboxOption","render","props","value","isChecked","children","CheckboxMultiSelect","constructor","state","defaultValue","currentValues","_handleChange","bind","setState","length","join","indexOf","First"],"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","sourcesContent":["// import React from 'react';\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n// import { classnames } from './helpers';\n\n// class SearchBar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       address: '',\n//       errorMessage: '',\n//       latitude: null,\n//       longitude: null,\n//       isGeocoding: false,\n//     };\n//   }\n\n//   handleChange = address => {\n//     this.setState({\n//       address,\n//       latitude: null,\n//       longitude: null,\n//       errorMessage: '',\n//     });\n//   };\n\n//   handleSelect = selected => {\n//     this.setState({ isGeocoding: true, address: selected });\n//     geocodeByAddress(selected)\n//       .then(res => getLatLng(res[0]))\n//       .then(({ lat, lng }) => {\n//         this.setState({\n//           latitude: lat,\n//           longitude: lng,\n//           isGeocoding: false,\n//         });\n//       })\n//       .catch(error => {\n//         this.setState({ isGeocoding: false });\n//         console.log('error', error); // eslint-disable-line no-console\n//       });\n//   };\n\n//   handleCloseClick = () => {\n//     this.setState({\n//       address: '',\n//       latitude: null,\n//       longitude: null,\n//     });\n//   };\n\n//   handleError = (status, clearSuggestions) => {\n//     console.log('Error from Google Maps API', status); // eslint-disable-line no-console\n//     this.setState({ errorMessage: status }, () => {\n//       clearSuggestions();\n//     });\n//   };\n\n//   render() {\n//     const {\n//       address,\n//       errorMessage,\n//       latitude,\n//       longitude,\n//       isGeocoding,\n//     } = this.state;\n\n//     return (\n//       <div>\n//         <PlacesAutocomplete\n//           onChange={this.handleChange}\n//           value={address}\n//           onSelect={this.handleSelect}\n//           onError={this.handleError}\n//           shouldFetchSuggestions={address.length > 2}\n//         >\n//           {({ getInputProps, suggestions, getSuggestionItemProps }) => {\n//             return (\n//               <div className=\"Demo__search-bar-container\">\n//                 <div className=\"Demo__search-input-container\">\n//                   <input\n//                     {...getInputProps({\n//                       placeholder: 'Search Places...',\n//                       className: 'Demo__search-input',\n//                     })}\n//                   />\n//                   {this.state.address.length > 0 && (\n//                     <button\n//                       className=\"Demo__clear-button\"\n//                       onClick={this.handleCloseClick}\n//                     >\n//                       x\n//                     </button>\n//                   )}\n//                 </div>\n//                 {suggestions.length > 0 && (\n//                   <div className=\"Demo__autocomplete-container\">\n//                     {suggestions.map(suggestion => {\n//                       const className = classnames('Demo__suggestion-item', {\n//                         'Demo__suggestion-item--active': suggestion.active,\n//                       });\n\n//                       return (\n//                         /* eslint-disable react/jsx-key */\n//                         <div\n//                           {...getSuggestionItemProps(suggestion, { className })}\n//                         >\n//                           <strong>\n//                             {suggestion.formattedSuggestion.mainText}\n//                           </strong>{' '}\n//                           <small>\n//                             {suggestion.formattedSuggestion.secondaryText}\n//                           </small>\n//                         </div>\n//                       );\n//                       /* eslint-enable react/jsx-key */\n//                     })}\n//                     <div className=\"Demo__dropdown-footer\">\n//                       <div>\n//                         <img\n//                         //   src={require('../images/powered_by_google_default.png')}\n//                           className=\"Demo__dropdown-footer-image\"\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           }}\n//         </PlacesAutocomplete>\n//         {errorMessage.length > 0 && (\n//           <div className=\"Demo__error-message\">{this.state.errorMessage}</div>\n//         )}\n\n//         {((latitude && longitude) || isGeocoding) && (\n//           <div>\n//             <h3 className=\"Demo__geocode-result-header\">Geocode result</h3>\n//             {isGeocoding ? (\n//               <div>\n//                 <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw Demo__spinner\" />\n//               </div>\n//             ) : (\n//               <div>\n//                 <div className=\"Demo__geocode-result-item--lat\">\n//                   <label>Latitude:</label>\n//                   <span>{latitude}</span>\n//                 </div>\n//                 <div className=\"Demo__geocode-result-item--lng\">\n//                   <label>Longitude:</label>\n//                   <span>{longitude}</span>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n  \n  \n  \n  \n//   );\n//   }\n// }\n\n// export default SearchBar;\n\nconst { Component, Children, PropTypes } = React\nconst { Select, Option, utils } = Selectly\nconst { getToggledOptions } = utils\n\nclass CheckboxOption extends Component {\n  render() {\n    const { value, isChecked, children } = this.props\n    return (\n      <Option className=\"react-select-option\" value={value}>\n        <input\n          type=\"checkbox\"\n          className=\"react-select-option__checkbox\"\n          defaultValue={null}\n          checked={isChecked}\n        />\n        <div className=\"react-select-option__label\">\n          {children}\n        </div>\n      </Option>\n    )\n  }\n}\n\nclass CheckboxMultiSelect extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      defaultValue: 'Select a color',\n      currentValues: []\n    }\n    this._handleChange = this._handleChange.bind(this)\n  }\n\n  _handleChange(value) {\n    this.setState({\n      currentValues: getToggledOptions(this.state.currentValues, value)\n    })\n  }\n\n  render() {\n    const { defaultValue, currentValues } = this.state\n\n    return (\n      <Select\n        classPrefix=\"react-select\"\n        multiple\n        onChange={this._handleChange}\n      >\n        <button className=\"react-select-trigger\">\n          { currentValues.length > 0\n            ? currentValues.join(', ')\n            : defaultValue\n          }\n        </button>\n        <div className=\"react-select-menu\">\n          <ul className=\"react-select-options\">\n            <CheckboxOption value=\"red\" isChecked={currentValues.indexOf('red') > -1}>\n              Red\n            </CheckboxOption>\n            <CheckboxOption value=\"green\" isChecked={currentValues.indexOf('green') > -1}>\n              Green\n            </CheckboxOption>\n            <CheckboxOption value=\"blue\" isChecked={currentValues.indexOf('blue') > -1}>\n              Blue\n            </CheckboxOption>\n          </ul>\n        </div>\n      </Select>\n    )\n  }\n}\n\nexport default First;\n"]},"metadata":{},"sourceType":"module"}