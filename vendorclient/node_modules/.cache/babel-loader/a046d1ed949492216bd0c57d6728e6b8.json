{"ast":null,"code":"var _jsxFileName = \"/home/shivendra/Desktop/techoffice/salamvendor/vendorclient/src/map.js\";\n// import React from 'react';\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n// import { classnames } from './helpers';\n// class SearchBar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       address: '',\n//       errorMessage: '',\n//       latitude: null,\n//       longitude: null,\n//       isGeocoding: false,\n//     };\n//   }\n//   handleChange = address => {\n//     this.setState({\n//       address,\n//       latitude: null,\n//       longitude: null,\n//       errorMessage: '',\n//     });\n//   };\n//   handleSelect = selected => {\n//     this.setState({ isGeocoding: true, address: selected });\n//     geocodeByAddress(selected)\n//       .then(res => getLatLng(res[0]))\n//       .then(({ lat, lng }) => {\n//         this.setState({\n//           latitude: lat,\n//           longitude: lng,\n//           isGeocoding: false,\n//         });\n//       })\n//       .catch(error => {\n//         this.setState({ isGeocoding: false });\n//         console.log('error', error); // eslint-disable-line no-console\n//       });\n//   };\n//   handleCloseClick = () => {\n//     this.setState({\n//       address: '',\n//       latitude: null,\n//       longitude: null,\n//     });\n//   };\n//   handleError = (status, clearSuggestions) => {\n//     console.log('Error from Google Maps API', status); // eslint-disable-line no-console\n//     this.setState({ errorMessage: status }, () => {\n//       clearSuggestions();\n//     });\n//   };\n//   render() {\n//     const {\n//       address,\n//       errorMessage,\n//       latitude,\n//       longitude,\n//       isGeocoding,\n//     } = this.state;\n//     return (\n//       <div>\n//         <PlacesAutocomplete\n//           onChange={this.handleChange}\n//           value={address}\n//           onSelect={this.handleSelect}\n//           onError={this.handleError}\n//           shouldFetchSuggestions={address.length > 2}\n//         >\n//           {({ getInputProps, suggestions, getSuggestionItemProps }) => {\n//             return (\n//               <div className=\"Demo__search-bar-container\">\n//                 <div className=\"Demo__search-input-container\">\n//                   <input\n//                     {...getInputProps({\n//                       placeholder: 'Search Places...',\n//                       className: 'Demo__search-input',\n//                     })}\n//                   />\n//                   {this.state.address.length > 0 && (\n//                     <button\n//                       className=\"Demo__clear-button\"\n//                       onClick={this.handleCloseClick}\n//                     >\n//                       x\n//                     </button>\n//                   )}\n//                 </div>\n//                 {suggestions.length > 0 && (\n//                   <div className=\"Demo__autocomplete-container\">\n//                     {suggestions.map(suggestion => {\n//                       const className = classnames('Demo__suggestion-item', {\n//                         'Demo__suggestion-item--active': suggestion.active,\n//                       });\n//                       return (\n//                         /* eslint-disable react/jsx-key */\n//                         <div\n//                           {...getSuggestionItemProps(suggestion, { className })}\n//                         >\n//                           <strong>\n//                             {suggestion.formattedSuggestion.mainText}\n//                           </strong>{' '}\n//                           <small>\n//                             {suggestion.formattedSuggestion.secondaryText}\n//                           </small>\n//                         </div>\n//                       );\n//                       /* eslint-enable react/jsx-key */\n//                     })}\n//                     <div className=\"Demo__dropdown-footer\">\n//                       <div>\n//                         <img\n//                         //   src={require('../images/powered_by_google_default.png')}\n//                           className=\"Demo__dropdown-footer-image\"\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           }}\n//         </PlacesAutocomplete>\n//         {errorMessage.length > 0 && (\n//           <div className=\"Demo__error-message\">{this.state.errorMessage}</div>\n//         )}\n//         {((latitude && longitude) || isGeocoding) && (\n//           <div>\n//             <h3 className=\"Demo__geocode-result-header\">Geocode result</h3>\n//             {isGeocoding ? (\n//               <div>\n//                 <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw Demo__spinner\" />\n//               </div>\n//             ) : (\n//               <div>\n//                 <div className=\"Demo__geocode-result-item--lat\">\n//                   <label>Latitude:</label>\n//                   <span>{latitude}</span>\n//                 </div>\n//                 <div className=\"Demo__geocode-result-item--lng\">\n//                   <label>Longitude:</label>\n//                   <span>{longitude}</span>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n//   );\n//   }\n// }\n// export default SearchBar;\n// import React, { Component } from 'react';\n// import  CheckBox  from './map1'\n// class First extends Component {\n// constructor(props) {\n//   super(props)\n//   this.state = {\n//     fruites: [\n//       {id: 1, value: \"banana\", isChecked: false},\n//       {id: 2, value: \"apple\", isChecked: false},\n//       {id: 3, value: \"mango\", isChecked: false},\n//       {id: 4, value: \"grap\", isChecked: false}\n//     ]\n//   }\n// }\n// handleAllChecked = (event) => {\n//   let fruites = this.state.fruites\n//   fruites.forEach(fruite => fruite.isChecked = event.target.checked) \n//   this.setState({fruites: fruites})\n// }\n// handleCheckChieldElement = (event) => {\n//   let fruites = this.state.fruites\n//   fruites.forEach(fruite => {\n//      if (fruite.value === event.target.value)\n//         fruite.isChecked =  event.target.checked\n//   })\n//   this.setState({fruites: fruites})\n// }\n// render() {\n//   console.log('7777777777777777777',this.state.fruites);\n//   return (\n//     <div className=\"App\">\n//     <h1> Check and Uncheck All Example </h1>\n//     <input type=\"checkbox\" onClick={this.handleAllChecked}  value=\"checkedall\" /> Check / Uncheck All\n//       <ul>\n//       {\n//         this.state.fruites.map((fruite) => {\n//           return (<CheckBox handleCheckChieldElement={this.handleCheckChieldElement}  {...fruite} />)\n//         })\n//       }\n//       </ul>\n//     </div>\n//   );\n// }\n// }\n// export default First;\n// import React , {Component} from 'react';\n// import { CheckBoxSelection, Inject, MultiSelectComponent } from '@syncfusion/ej2-react-dropdowns';\n// import ReactMultiSelectCheckboxes from 'react-multiselect-checkboxes';\n// class First extends Component {\n//   sportsData = [\n//     { Id: 'game1', Game: 'Badminton' },\n//     { Id: 'game2', Game: 'Football' },\n//     { Id: 'game3', Game: 'Tennis' },\n//     { Id: 'game4', Game: 'Golf' },\n//     { Id: 'game5', Game: 'Cricket' },\n//     { Id: 'game6', Game: 'Handball' },\n//     { Id: 'game7', Game: 'Karate' },\n//     { Id: 'game8', Game: 'Fencing' },\n//     { Id: 'game9', Game: 'Boxing' }\n// ];\n//   fields = { text: 'Game', value: 'Id' };\n//   render() {\n//     const options = [\n//       { label: 'Thing 1', value: 1},\n//       { label: 'Thing 2', value: 2},\n//     ];\n//     console.log('99999999999999',options);\n//     return (\n//         // specifies the tag for render the MultiSelect component\n//         <div>\n//         <MultiSelectComponent id=\"checkbox\" dataSource={this.sportsData}\n//                 fields={this.fields} placeholder=\"Select game\" mode=\"CheckBox\" selectAllText=\"Select All\" unSelectAllText=\"unSelect All\" showSelectAll={true}>\n//                 <Inject services={[CheckBoxSelection]} />\n//             </MultiSelectComponent>\n//               <br/>\n//               <br/>\n//             {/* <ReactMultiSelectCheckboxes options={options} /> */}\n//             </div>\n//     );\n// }\n// }\n// export default First;\nimport React, { useState, useEffect, Component } from 'react';\nimport CheckboxGroup from 'react-checkbox-group';\n\nclass Demo extends Component {\n  // Initialize the checked values\n  // const [fruits, setFruits] = useState(['apple', 'watermelon'])\n  constructor(props) {\n    super(props);\n    this.state = {\n      fruits: ['apple', 'watermelon']\n    };\n  }\n\n  setFruits(event) {\n    // console.log('888888888888888',e.target.value);\n    // this.setState({\n    //   fruits : e.target.value\n    // })\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    let state = this.state;\n    state[name].message = '';\n    state[name].value = value;\n    this.setState(state);\n  }\n\n  render() {\n    console.log('77777777777777', this.state.fruits);\n    return React.createElement(CheckboxGroup, {\n      name: \"fruits\",\n      value: this.state.fruits,\n      onChange: this.setFruits.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, Checkbox => React.createElement(React.Fragment, null, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      value: \"apple\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }), \" Apple\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      value: \"orange\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), \" Orange\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      value: \"watermelon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }), \" Watermelon\")));\n  }\n\n}\n\nexport default Demo;","map":{"version":3,"sources":["/home/shivendra/Desktop/techoffice/salamvendor/vendorclient/src/map.js"],"names":["React","useState","useEffect","Component","CheckboxGroup","Demo","constructor","props","state","fruits","setFruits","event","target","name","value","message","setState","render","console","log","bind","Checkbox"],"mappingsgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAOC,aAAP,MAA0B,sBAA1B;;AAEA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAC3B;AACA;AAEAG,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAG,CAAC,OAAD,EAAU,YAAV;AADE,KAAb;AAGD;;AAEDC,EAAAA,SAAS,CAACC,KAAD,EAAO;AACd;AACA;AACA;AACA;AAJc,0BAMOA,KAAK,CAACC,MANb;AAAA,UAMPC,IANO,iBAMPA,IANO;AAAA,UAMFC,KANE,iBAMFA,KANE;AAOd,QAAIN,KAAK,GAAG,KAAKA,KAAjB;AACAA,IAAAA,KAAK,CAACK,IAAD,CAAL,CAAYE,OAAZ,GAAsB,EAAtB;AACAP,IAAAA,KAAK,CAACK,IAAD,CAAL,CAAYC,KAAZ,GAAoBA,KAApB;AACA,SAAKE,QAAL,CAAcR,KAAd;AACD;;AAIDS,EAAAA,MAAM,GAAE;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6B,KAAKX,KAAL,CAAWC,MAAxC;AAEF,WACE,oBAAC,aAAD;AAAe,MAAA,IAAI,EAAC,QAApB;AAA6B,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,MAA/C;AAAuD,MAAA,QAAQ,EAAE,KAAKC,SAAL,CAAeU,IAAf,CAAoB,IAApB,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIC,QAAD,IACC,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,WADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,YAJF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,gBAPF,CAFJ,CADF;AAiBD;;AA9C4B;;AAkD7B,eAAehB,IAAf","sourcesContent":["// import React from 'react';\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n// import { classnames } from './helpers';\n\n// class SearchBar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       address: '',\n//       errorMessage: '',\n//       latitude: null,\n//       longitude: null,\n//       isGeocoding: false,\n//     };\n//   }\n\n//   handleChange = address => {\n//     this.setState({\n//       address,\n//       latitude: null,\n//       longitude: null,\n//       errorMessage: '',\n//     });\n//   };\n\n//   handleSelect = selected => {\n//     this.setState({ isGeocoding: true, address: selected });\n//     geocodeByAddress(selected)\n//       .then(res => getLatLng(res[0]))\n//       .then(({ lat, lng }) => {\n//         this.setState({\n//           latitude: lat,\n//           longitude: lng,\n//           isGeocoding: false,\n//         });\n//       })\n//       .catch(error => {\n//         this.setState({ isGeocoding: false });\n//         console.log('error', error); // eslint-disable-line no-console\n//       });\n//   };\n\n//   handleCloseClick = () => {\n//     this.setState({\n//       address: '',\n//       latitude: null,\n//       longitude: null,\n//     });\n//   };\n\n//   handleError = (status, clearSuggestions) => {\n//     console.log('Error from Google Maps API', status); // eslint-disable-line no-console\n//     this.setState({ errorMessage: status }, () => {\n//       clearSuggestions();\n//     });\n//   };\n\n//   render() {\n//     const {\n//       address,\n//       errorMessage,\n//       latitude,\n//       longitude,\n//       isGeocoding,\n//     } = this.state;\n\n//     return (\n//       <div>\n//         <PlacesAutocomplete\n//           onChange={this.handleChange}\n//           value={address}\n//           onSelect={this.handleSelect}\n//           onError={this.handleError}\n//           shouldFetchSuggestions={address.length > 2}\n//         >\n//           {({ getInputProps, suggestions, getSuggestionItemProps }) => {\n//             return (\n//               <div className=\"Demo__search-bar-container\">\n//                 <div className=\"Demo__search-input-container\">\n//                   <input\n//                     {...getInputProps({\n//                       placeholder: 'Search Places...',\n//                       className: 'Demo__search-input',\n//                     })}\n//                   />\n//                   {this.state.address.length > 0 && (\n//                     <button\n//                       className=\"Demo__clear-button\"\n//                       onClick={this.handleCloseClick}\n//                     >\n//                       x\n//                     </button>\n//                   )}\n//                 </div>\n//                 {suggestions.length > 0 && (\n//                   <div className=\"Demo__autocomplete-container\">\n//                     {suggestions.map(suggestion => {\n//                       const className = classnames('Demo__suggestion-item', {\n//                         'Demo__suggestion-item--active': suggestion.active,\n//                       });\n\n//                       return (\n//                         /* eslint-disable react/jsx-key */\n//                         <div\n//                           {...getSuggestionItemProps(suggestion, { className })}\n//                         >\n//                           <strong>\n//                             {suggestion.formattedSuggestion.mainText}\n//                           </strong>{' '}\n//                           <small>\n//                             {suggestion.formattedSuggestion.secondaryText}\n//                           </small>\n//                         </div>\n//                       );\n//                       /* eslint-enable react/jsx-key */\n//                     })}\n//                     <div className=\"Demo__dropdown-footer\">\n//                       <div>\n//                         <img\n//                         //   src={require('../images/powered_by_google_default.png')}\n//                           className=\"Demo__dropdown-footer-image\"\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           }}\n//         </PlacesAutocomplete>\n//         {errorMessage.length > 0 && (\n//           <div className=\"Demo__error-message\">{this.state.errorMessage}</div>\n//         )}\n\n//         {((latitude && longitude) || isGeocoding) && (\n//           <div>\n//             <h3 className=\"Demo__geocode-result-header\">Geocode result</h3>\n//             {isGeocoding ? (\n//               <div>\n//                 <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw Demo__spinner\" />\n//               </div>\n//             ) : (\n//               <div>\n//                 <div className=\"Demo__geocode-result-item--lat\">\n//                   <label>Latitude:</label>\n//                   <span>{latitude}</span>\n//                 </div>\n//                 <div className=\"Demo__geocode-result-item--lng\">\n//                   <label>Longitude:</label>\n//                   <span>{longitude}</span>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n  \n  \n  \n  \n//   );\n//   }\n// }\n\n// export default SearchBar;\n\n// import React, { Component } from 'react';\n// import  CheckBox  from './map1'\n\n// class First extends Component {\n// constructor(props) {\n//   super(props)\n//   this.state = {\n//     fruites: [\n//       {id: 1, value: \"banana\", isChecked: false},\n//       {id: 2, value: \"apple\", isChecked: false},\n//       {id: 3, value: \"mango\", isChecked: false},\n//       {id: 4, value: \"grap\", isChecked: false}\n//     ]\n//   }\n// }\n\n// handleAllChecked = (event) => {\n//   let fruites = this.state.fruites\n//   fruites.forEach(fruite => fruite.isChecked = event.target.checked) \n//   this.setState({fruites: fruites})\n// }\n\n// handleCheckChieldElement = (event) => {\n//   let fruites = this.state.fruites\n//   fruites.forEach(fruite => {\n//      if (fruite.value === event.target.value)\n//         fruite.isChecked =  event.target.checked\n//   })\n//   this.setState({fruites: fruites})\n// }\n\n// render() {\n//   console.log('7777777777777777777',this.state.fruites);\n//   return (\n//     <div className=\"App\">\n//     <h1> Check and Uncheck All Example </h1>\n//     <input type=\"checkbox\" onClick={this.handleAllChecked}  value=\"checkedall\" /> Check / Uncheck All\n//       <ul>\n//       {\n//         this.state.fruites.map((fruite) => {\n//           return (<CheckBox handleCheckChieldElement={this.handleCheckChieldElement}  {...fruite} />)\n//         })\n//       }\n//       </ul>\n//     </div>\n//   );\n// }\n// }\n\n// export default First;\n\n\n// import React , {Component} from 'react';\n// import { CheckBoxSelection, Inject, MultiSelectComponent } from '@syncfusion/ej2-react-dropdowns';\n// import ReactMultiSelectCheckboxes from 'react-multiselect-checkboxes';\n// class First extends Component {\n//   sportsData = [\n//     { Id: 'game1', Game: 'Badminton' },\n//     { Id: 'game2', Game: 'Football' },\n//     { Id: 'game3', Game: 'Tennis' },\n//     { Id: 'game4', Game: 'Golf' },\n//     { Id: 'game5', Game: 'Cricket' },\n//     { Id: 'game6', Game: 'Handball' },\n//     { Id: 'game7', Game: 'Karate' },\n//     { Id: 'game8', Game: 'Fencing' },\n//     { Id: 'game9', Game: 'Boxing' }\n// ];\n//   fields = { text: 'Game', value: 'Id' };\n//   render() {\n//     const options = [\n//       { label: 'Thing 1', value: 1},\n//       { label: 'Thing 2', value: 2},\n//     ];\n//     console.log('99999999999999',options);\n//     return (\n//         // specifies the tag for render the MultiSelect component\n//         <div>\n//         <MultiSelectComponent id=\"checkbox\" dataSource={this.sportsData}\n//                 fields={this.fields} placeholder=\"Select game\" mode=\"CheckBox\" selectAllText=\"Select All\" unSelectAllText=\"unSelect All\" showSelectAll={true}>\n//                 <Inject services={[CheckBoxSelection]} />\n//             </MultiSelectComponent>\n//               <br/>\n//               <br/>\n//             {/* <ReactMultiSelectCheckboxes options={options} /> */}\n//             </div>\n//     );\n// }\n\n// }\n\n// export default First;\n\n\nimport React, { useState, useEffect, Component } from 'react'\nimport CheckboxGroup from 'react-checkbox-group'\n \nclass Demo extends Component {\n  // Initialize the checked values\n  // const [fruits, setFruits] = useState(['apple', 'watermelon'])\n\n  constructor(props){\n    super(props);\n    this.state = {\n      fruits : ['apple', 'watermelon']\n    }\n  }\n\n  setFruits(event){\n    // console.log('888888888888888',e.target.value);\n    // this.setState({\n    //   fruits : e.target.value\n    // })\n\n    const {name,value} = event.target;\n    let state = this.state;\n    state[name].message = '';\n    state[name].value = value;\n    this.setState(state);\n  }\n\n\n  \n  render(){\n    console.log('77777777777777',this.state.fruits);\n    \n  return (\n    <CheckboxGroup name=\"fruits\" value={this.state.fruits} onChange={this.setFruits.bind(this)}>\n      {(Checkbox) => (\n        <>\n          <label>\n            <Checkbox value= \"apple\" /> Apple\n          </label>\n          <label>\n            <Checkbox value=\"orange\" /> Orange\n          </label>\n          <label>\n            <Checkbox value=\"watermelon\" /> Watermelon\n          </label>\n        </>\n      )}\n    </CheckboxGroup>\n  )\n}\n}\n\n\nexport default Demo;\n"]},"metadata":{},"sourceType":"module"}