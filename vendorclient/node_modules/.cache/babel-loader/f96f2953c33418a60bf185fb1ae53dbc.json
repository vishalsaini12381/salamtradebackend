{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CheckboxGroupHeading = CheckboxGroupHeading;\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _emotion = require(\"emotion\");\n\nvar _CheckboxWithIndeterminate = _interopRequireDefault(require(\"./CheckboxWithIndeterminate\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction CheckboxGroup(props) {\n  var children = props.children,\n      className = props.className,\n      cx = props.cx,\n      getStyles = props.getStyles,\n      Heading = props.Heading,\n      setValue = props.setValue,\n      data = props.data,\n      label = props.label,\n      getValue = props.getValue,\n      getOptionValue = props.selectProps.getOptionValue,\n      theme = props.theme;\n\n  var optionsIncludes = function optionsIncludes(v) {\n    return !!data.options.find(function (opt) {\n      return getOptionValue(opt) === getOptionValue(v);\n    });\n  };\n\n  var numCheckedOptions = getValue().filter(function (v) {\n    return optionsIncludes(v);\n  }).length;\n  var checked = numCheckedOptions === data.options.length;\n  var indeterminate = numCheckedOptions > 0 && !checked;\n  var checkboxProps = {\n    indeterminate: indeterminate,\n    checked: checked\n  };\n\n  var selectAllOptions = function selectAllOptions() {\n    var newValue = _toConsumableArray(getValue().filter(function (v) {\n      return !optionsIncludes(v);\n    })).concat(_toConsumableArray(data.options));\n\n    setValue(newValue);\n  };\n\n  var clearOptions = function clearOptions() {\n    var newValue = getValue().filter(function (v) {\n      return !optionsIncludes(v);\n    });\n    setValue(newValue);\n  };\n\n  return _react.default.createElement(\"div\", {\n    className: cx((0, _emotion.css)(getStyles('group', props)), {\n      group: true\n    }, className)\n  }, _react.default.createElement(Heading, {\n    checkboxProps: checkboxProps,\n    getStyles: getStyles,\n    cx: cx,\n    theme: theme,\n    onClick: function onClick() {\n      if (indeterminate || checked) {\n        clearOptions();\n      } else {\n        selectAllOptions();\n      }\n    }\n  }, label), _react.default.createElement(\"div\", null, children));\n}\n\nCheckboxGroup.propTypes = {\n  children: _propTypes.default.node,\n  className: _propTypes.default.string,\n  cx: _propTypes.default.func.isRequired,\n  getStyles: _propTypes.default.func.isRequired,\n  Heading: _propTypes.default.func.isRequired,\n  getValue: _propTypes.default.func.isRequired,\n  setValue: _propTypes.default.func.isRequired,\n  label: _propTypes.default.string.isRequired,\n  data: _propTypes.default.shape({\n    options: _propTypes.default.arrayOf(_propTypes.default.shape({\n      label: _propTypes.default.node,\n      value: _propTypes.default.any\n    }))\n  }).isRequired,\n  theme: _propTypes.default.object.isRequired,\n  // eslint-disable-line react/forbid-prop-types\n  selectProps: _propTypes.default.objectOf(_propTypes.default.any).isRequired\n};\nCheckboxGroup.defaultProps = {\n  children: null,\n  className: undefined\n};\n\nfunction CheckboxGroupHeading(props) {\n  var className = props.className,\n      cx = props.cx,\n      getStyles = props.getStyles,\n      children = props.children,\n      checkboxProps = props.checkboxProps,\n      cleanProps = _objectWithoutProperties(props, [\"className\", \"cx\", \"getStyles\", \"children\", \"checkboxProps\"]);\n\n  return _react.default.createElement(\"div\", _extends({\n    className: cx((0, _emotion.css)(getStyles('groupHeading', _objectSpread({}, props, checkboxProps))), {\n      'group-heading': true\n    }, className)\n  }, cleanProps), _react.default.createElement(_CheckboxWithIndeterminate.default, _extends({\n    readOnly: true,\n    type: \"checkbox\"\n  }, checkboxProps)), children);\n}\n\nCheckboxGroupHeading.propTypes = {\n  children: _propTypes.default.node,\n  className: _propTypes.default.string,\n  cx: _propTypes.default.func.isRequired,\n  getStyles: _propTypes.default.func.isRequired,\n  checkboxProps: _propTypes.default.shape({\n    checked: _propTypes.default.bool,\n    indeterminate: _propTypes.default.bool\n  }).isRequired\n};\nCheckboxGroupHeading.defaultProps = {\n  children: null,\n  className: undefined\n};\nvar _default = CheckboxGroup;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}