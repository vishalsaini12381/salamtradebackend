{"ast":null,"code":"var _jsxFileName = \"/home/shivendra/Desktop/techoffice/salamvendor/vendorclient/src/map.js\";\n// import React from 'react';\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n// import { classnames } from './helpers';\n// class SearchBar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       address: '',\n//       errorMessage: '',\n//       latitude: null,\n//       longitude: null,\n//       isGeocoding: false,\n//     };\n//   }\n//   handleChange = address => {\n//     this.setState({\n//       address,\n//       latitude: null,\n//       longitude: null,\n//       errorMessage: '',\n//     });\n//   };\n//   handleSelect = selected => {\n//     this.setState({ isGeocoding: true, address: selected });\n//     geocodeByAddress(selected)\n//       .then(res => getLatLng(res[0]))\n//       .then(({ lat, lng }) => {\n//         this.setState({\n//           latitude: lat,\n//           longitude: lng,\n//           isGeocoding: false,\n//         });\n//       })\n//       .catch(error => {\n//         this.setState({ isGeocoding: false });\n//         console.log('error', error); // eslint-disable-line no-console\n//       });\n//   };\n//   handleCloseClick = () => {\n//     this.setState({\n//       address: '',\n//       latitude: null,\n//       longitude: null,\n//     });\n//   };\n//   handleError = (status, clearSuggestions) => {\n//     console.log('Error from Google Maps API', status); // eslint-disable-line no-console\n//     this.setState({ errorMessage: status }, () => {\n//       clearSuggestions();\n//     });\n//   };\n//   render() {\n//     const {\n//       address,\n//       errorMessage,\n//       latitude,\n//       longitude,\n//       isGeocoding,\n//     } = this.state;\n//     return (\n//       <div>\n//         <PlacesAutocomplete\n//           onChange={this.handleChange}\n//           value={address}\n//           onSelect={this.handleSelect}\n//           onError={this.handleError}\n//           shouldFetchSuggestions={address.length > 2}\n//         >\n//           {({ getInputProps, suggestions, getSuggestionItemProps }) => {\n//             return (\n//               <div className=\"Demo__search-bar-container\">\n//                 <div className=\"Demo__search-input-container\">\n//                   <input\n//                     {...getInputProps({\n//                       placeholder: 'Search Places...',\n//                       className: 'Demo__search-input',\n//                     })}\n//                   />\n//                   {this.state.address.length > 0 && (\n//                     <button\n//                       className=\"Demo__clear-button\"\n//                       onClick={this.handleCloseClick}\n//                     >\n//                       x\n//                     </button>\n//                   )}\n//                 </div>\n//                 {suggestions.length > 0 && (\n//                   <div className=\"Demo__autocomplete-container\">\n//                     {suggestions.map(suggestion => {\n//                       const className = classnames('Demo__suggestion-item', {\n//                         'Demo__suggestion-item--active': suggestion.active,\n//                       });\n//                       return (\n//                         /* eslint-disable react/jsx-key */\n//                         <div\n//                           {...getSuggestionItemProps(suggestion, { className })}\n//                         >\n//                           <strong>\n//                             {suggestion.formattedSuggestion.mainText}\n//                           </strong>{' '}\n//                           <small>\n//                             {suggestion.formattedSuggestion.secondaryText}\n//                           </small>\n//                         </div>\n//                       );\n//                       /* eslint-enable react/jsx-key */\n//                     })}\n//                     <div className=\"Demo__dropdown-footer\">\n//                       <div>\n//                         <img\n//                         //   src={require('../images/powered_by_google_default.png')}\n//                           className=\"Demo__dropdown-footer-image\"\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           }}\n//         </PlacesAutocomplete>\n//         {errorMessage.length > 0 && (\n//           <div className=\"Demo__error-message\">{this.state.errorMessage}</div>\n//         )}\n//         {((latitude && longitude) || isGeocoding) && (\n//           <div>\n//             <h3 className=\"Demo__geocode-result-header\">Geocode result</h3>\n//             {isGeocoding ? (\n//               <div>\n//                 <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw Demo__spinner\" />\n//               </div>\n//             ) : (\n//               <div>\n//                 <div className=\"Demo__geocode-result-item--lat\">\n//                   <label>Latitude:</label>\n//                   <span>{latitude}</span>\n//                 </div>\n//                 <div className=\"Demo__geocode-result-item--lng\">\n//                   <label>Longitude:</label>\n//                   <span>{longitude}</span>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n//   );\n//   }\n// }\n// export default SearchBar;\nimport React, { Component } from 'react';\nimport CheckBox from './map1';\nconst items = ['One', 'Two', 'Three'];\n\nclass First extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentWillMount = () => {\n      this.selectedCheckboxes = new Set();\n    };\n\n    this.toggleCheckbox = label => {\n      if (this.selectedCheckboxes.has(label)) {\n        this.selectedCheckboxes.delete(label);\n      } else {\n        this.selectedCheckboxes.add(label);\n      }\n    };\n\n    this.handleFormSubmit = formSubmitEvent => {\n      formSubmitEvent.preventDefault();\n\n      for (const checkbox of this.selectedCheckboxes) {\n        console.log(checkbox, 'is selected.');\n      }\n    };\n\n    this.createCheckbox = label => React.createElement(Checkbox, {\n      label: label,\n      handleCheckboxChange: this.toggleCheckbox,\n      key: label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    });\n\n    this.createCheckboxes = () => items.map(this.createCheckbox);\n  }\n\n  render() {\n    console.log('7777777777777777777', this.state.fruites);\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, this.createCheckboxes(), React.createElement(\"button\", {\n      className: \"btn btn-default\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"Save\")))));\n  }\n\n}\n\nexport default First;","map":{"version":3,"sources":["/home/shivendra/Desktop/techoffice/salamvendor/vendorclient/src/map.js"],"names":["React","Component","CheckBox","items","First","componentWillMount","selectedCheckboxes","Set","toggleCheckbox","label","has","delete","add","handleFormSubmit","formSubmitEvent","preventDefault","checkbox","console","log","createCheckbox","createCheckboxes","map","render","state","fruites"],"mappingsgBC,SAAhB,QAAiC,OAAjC;AACA,OAAQC,QAAR,MAAuB,QAAvB;AAEA,MAAMC,KAAK,GAAG,CACZ,KADY,EAEZ,KAFY,EAGZ,OAHY,CAAd;;AAMA,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AAAA;AAAA;;AAAA,SAE5BI,kBAF4B,GAEP,MAAM;AACzB,WAAKC,kBAAL,GAA0B,IAAIC,GAAJ,EAA1B;AACD,KAJ2B;;AAAA,SAM5BC,cAN4B,GAMXC,KAAK,IAAI;AACxB,UAAI,KAAKH,kBAAL,CAAwBI,GAAxB,CAA4BD,KAA5B,CAAJ,EAAwC;AACtC,aAAKH,kBAAL,CAAwBK,MAAxB,CAA+BF,KAA/B;AACD,OAFD,MAEO;AACL,aAAKH,kBAAL,CAAwBM,GAAxB,CAA4BH,KAA5B;AACD;AACF,KAZ2B;;AAAA,SAc5BI,gBAd4B,GAcTC,eAAe,IAAI;AACpCA,MAAAA,eAAe,CAACC,cAAhB;;AAEA,WAAK,MAAMC,QAAX,IAAuB,KAAKV,kBAA5B,EAAgD;AAC9CW,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EAAsB,cAAtB;AACD;AACF,KApB2B;;AAAA,SAsB5BG,cAtB4B,GAsBXV,KAAK,IACpB,oBAAC,QAAD;AACQ,MAAA,KAAK,EAAEA,KADf;AAEQ,MAAA,oBAAoB,EAAE,KAAKD,cAFnC;AAGQ,MAAA,GAAG,EAAEC,KAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvB0B;;AAAA,SA8B5BW,gBA9B4B,GA8BT,MACjBjB,KAAK,CAACkB,GAAN,CAAU,KAAKF,cAAf,CA/B0B;AAAA;;AAmC9BG,EAAAA,MAAM,GAAG;AACPL,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkC,KAAKK,KAAL,CAAWC,OAA7C;AACA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAM,MAAA,QAAQ,EAAE,KAAKX,gBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKO,gBAAL,EADH,EAGE;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,IAAI,EAAC,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,CAFF,CADF,CADA,CADF;AAeD;;AApD6B;;AAuD9B,eAAehB,KAAf","sourcesContent":["// import React from 'react';\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n// import { classnames } from './helpers';\n\n// class SearchBar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       address: '',\n//       errorMessage: '',\n//       latitude: null,\n//       longitude: null,\n//       isGeocoding: false,\n//     };\n//   }\n\n//   handleChange = address => {\n//     this.setState({\n//       address,\n//       latitude: null,\n//       longitude: null,\n//       errorMessage: '',\n//     });\n//   };\n\n//   handleSelect = selected => {\n//     this.setState({ isGeocoding: true, address: selected });\n//     geocodeByAddress(selected)\n//       .then(res => getLatLng(res[0]))\n//       .then(({ lat, lng }) => {\n//         this.setState({\n//           latitude: lat,\n//           longitude: lng,\n//           isGeocoding: false,\n//         });\n//       })\n//       .catch(error => {\n//         this.setState({ isGeocoding: false });\n//         console.log('error', error); // eslint-disable-line no-console\n//       });\n//   };\n\n//   handleCloseClick = () => {\n//     this.setState({\n//       address: '',\n//       latitude: null,\n//       longitude: null,\n//     });\n//   };\n\n//   handleError = (status, clearSuggestions) => {\n//     console.log('Error from Google Maps API', status); // eslint-disable-line no-console\n//     this.setState({ errorMessage: status }, () => {\n//       clearSuggestions();\n//     });\n//   };\n\n//   render() {\n//     const {\n//       address,\n//       errorMessage,\n//       latitude,\n//       longitude,\n//       isGeocoding,\n//     } = this.state;\n\n//     return (\n//       <div>\n//         <PlacesAutocomplete\n//           onChange={this.handleChange}\n//           value={address}\n//           onSelect={this.handleSelect}\n//           onError={this.handleError}\n//           shouldFetchSuggestions={address.length > 2}\n//         >\n//           {({ getInputProps, suggestions, getSuggestionItemProps }) => {\n//             return (\n//               <div className=\"Demo__search-bar-container\">\n//                 <div className=\"Demo__search-input-container\">\n//                   <input\n//                     {...getInputProps({\n//                       placeholder: 'Search Places...',\n//                       className: 'Demo__search-input',\n//                     })}\n//                   />\n//                   {this.state.address.length > 0 && (\n//                     <button\n//                       className=\"Demo__clear-button\"\n//                       onClick={this.handleCloseClick}\n//                     >\n//                       x\n//                     </button>\n//                   )}\n//                 </div>\n//                 {suggestions.length > 0 && (\n//                   <div className=\"Demo__autocomplete-container\">\n//                     {suggestions.map(suggestion => {\n//                       const className = classnames('Demo__suggestion-item', {\n//                         'Demo__suggestion-item--active': suggestion.active,\n//                       });\n\n//                       return (\n//                         /* eslint-disable react/jsx-key */\n//                         <div\n//                           {...getSuggestionItemProps(suggestion, { className })}\n//                         >\n//                           <strong>\n//                             {suggestion.formattedSuggestion.mainText}\n//                           </strong>{' '}\n//                           <small>\n//                             {suggestion.formattedSuggestion.secondaryText}\n//                           </small>\n//                         </div>\n//                       );\n//                       /* eslint-enable react/jsx-key */\n//                     })}\n//                     <div className=\"Demo__dropdown-footer\">\n//                       <div>\n//                         <img\n//                         //   src={require('../images/powered_by_google_default.png')}\n//                           className=\"Demo__dropdown-footer-image\"\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           }}\n//         </PlacesAutocomplete>\n//         {errorMessage.length > 0 && (\n//           <div className=\"Demo__error-message\">{this.state.errorMessage}</div>\n//         )}\n\n//         {((latitude && longitude) || isGeocoding) && (\n//           <div>\n//             <h3 className=\"Demo__geocode-result-header\">Geocode result</h3>\n//             {isGeocoding ? (\n//               <div>\n//                 <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw Demo__spinner\" />\n//               </div>\n//             ) : (\n//               <div>\n//                 <div className=\"Demo__geocode-result-item--lat\">\n//                   <label>Latitude:</label>\n//                   <span>{latitude}</span>\n//                 </div>\n//                 <div className=\"Demo__geocode-result-item--lng\">\n//                   <label>Longitude:</label>\n//                   <span>{longitude}</span>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n  \n  \n  \n  \n//   );\n//   }\n// }\n\n// export default SearchBar;\n\nimport React, { Component } from 'react';\nimport  CheckBox  from './map1'\n\nconst items = [\n  'One',\n  'Two',\n  'Three',\n];\n\nclass First extends Component {\n\n  componentWillMount = () => {\n    this.selectedCheckboxes = new Set();\n  }\n\n  toggleCheckbox = label => {\n    if (this.selectedCheckboxes.has(label)) {\n      this.selectedCheckboxes.delete(label);\n    } else {\n      this.selectedCheckboxes.add(label);\n    }\n  }\n\n  handleFormSubmit = formSubmitEvent => {\n    formSubmitEvent.preventDefault();\n\n    for (const checkbox of this.selectedCheckboxes) {\n      console.log(checkbox, 'is selected.');\n    }\n  }\n\n  createCheckbox = label => (\n    <Checkbox\n            label={label}\n            handleCheckboxChange={this.toggleCheckbox}\n            key={label}\n        />\n  )\n\n  createCheckboxes = () => (\n    items.map(this.createCheckbox)\n  )\n\n\nrender() {\n  console.log('7777777777777777777',this.state.fruites);\n  return (\n    <div className=\"container\">\n    <div className=\"row\">\n      <div className=\"col-sm-12\">\n\n        <form onSubmit={this.handleFormSubmit}>\n          {this.createCheckboxes()}\n\n          <button className=\"btn btn-default\" type=\"submit\">Save</button>\n        </form>\n\n      </div>\n    </div>\n  </div>\n  );\n}\n}\n\nexport default First;\n"]},"metadata":{},"sourceType":"module"}