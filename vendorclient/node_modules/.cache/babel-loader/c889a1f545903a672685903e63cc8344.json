{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createFullPageComponent\n * @typechecks\n */\n\"use strict\"; // Defeat circular references by requiring this directly.\n\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar invariant = require(\"./invariant\");\n/**\n * Create a component that will throw an exception when unmounted.\n *\n * Components like <html> <head> and <body> can't be removed or added\n * easily in a cross-browser way, however it's valuable to be able to\n * take advantage of React's reconciliation for styling and <title>\n * management. So we just document it and throw in dangerous cases.\n *\n * @param {string} tag The tag to wrap\n * @return {function} convenience constructor of new component\n */\n\n\nfunction createFullPageComponent(tag) {\n  var elementFactory = ReactElement.createFactory(tag);\n  var FullPageComponent = ReactCompositeComponent.createClass({\n    displayName: 'ReactFullPageComponent' + tag,\n    componentWillUnmount: function () {\n      \"production\" !== process.env.NODE_ENV ? invariant(false, '%s tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, <head>, ' + 'and <body>) reliably and efficiently. To fix this, have a single ' + 'top-level component that never unmounts render these elements.', this.constructor.displayName) : invariant(false);\n    },\n    render: function () {\n      return elementFactory(this.props);\n    }\n  });\n  return FullPageComponent;\n}\n\nmodule.exports = createFullPageComponent;","map":null,"metadata":{},"sourceType":"script"}