{"ast":null,"code":"var _jsxFileName = \"/home/shivendra/Desktop/techoffice/salamvendor/vendorclient/src/map.js\";\n// import React from 'react';\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n// import { classnames } from './helpers';\n// class SearchBar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       address: '',\n//       errorMessage: '',\n//       latitude: null,\n//       longitude: null,\n//       isGeocoding: false,\n//     };\n//   }\n//   handleChange = address => {\n//     this.setState({\n//       address,\n//       latitude: null,\n//       longitude: null,\n//       errorMessage: '',\n//     });\n//   };\n//   handleSelect = selected => {\n//     this.setState({ isGeocoding: true, address: selected });\n//     geocodeByAddress(selected)\n//       .then(res => getLatLng(res[0]))\n//       .then(({ lat, lng }) => {\n//         this.setState({\n//           latitude: lat,\n//           longitude: lng,\n//           isGeocoding: false,\n//         });\n//       })\n//       .catch(error => {\n//         this.setState({ isGeocoding: false });\n//         console.log('error', error); // eslint-disable-line no-console\n//       });\n//   };\n//   handleCloseClick = () => {\n//     this.setState({\n//       address: '',\n//       latitude: null,\n//       longitude: null,\n//     });\n//   };\n//   handleError = (status, clearSuggestions) => {\n//     console.log('Error from Google Maps API', status); // eslint-disable-line no-console\n//     this.setState({ errorMessage: status }, () => {\n//       clearSuggestions();\n//     });\n//   };\n//   render() {\n//     const {\n//       address,\n//       errorMessage,\n//       latitude,\n//       longitude,\n//       isGeocoding,\n//     } = this.state;\n//     return (\n//       <div>\n//         <PlacesAutocomplete\n//           onChange={this.handleChange}\n//           value={address}\n//           onSelect={this.handleSelect}\n//           onError={this.handleError}\n//           shouldFetchSuggestions={address.length > 2}\n//         >\n//           {({ getInputProps, suggestions, getSuggestionItemProps }) => {\n//             return (\n//               <div className=\"Demo__search-bar-container\">\n//                 <div className=\"Demo__search-input-container\">\n//                   <input\n//                     {...getInputProps({\n//                       placeholder: 'Search Places...',\n//                       className: 'Demo__search-input',\n//                     })}\n//                   />\n//                   {this.state.address.length > 0 && (\n//                     <button\n//                       className=\"Demo__clear-button\"\n//                       onClick={this.handleCloseClick}\n//                     >\n//                       x\n//                     </button>\n//                   )}\n//                 </div>\n//                 {suggestions.length > 0 && (\n//                   <div className=\"Demo__autocomplete-container\">\n//                     {suggestions.map(suggestion => {\n//                       const className = classnames('Demo__suggestion-item', {\n//                         'Demo__suggestion-item--active': suggestion.active,\n//                       });\n//                       return (\n//                         /* eslint-disable react/jsx-key */\n//                         <div\n//                           {...getSuggestionItemProps(suggestion, { className })}\n//                         >\n//                           <strong>\n//                             {suggestion.formattedSuggestion.mainText}\n//                           </strong>{' '}\n//                           <small>\n//                             {suggestion.formattedSuggestion.secondaryText}\n//                           </small>\n//                         </div>\n//                       );\n//                       /* eslint-enable react/jsx-key */\n//                     })}\n//                     <div className=\"Demo__dropdown-footer\">\n//                       <div>\n//                         <img\n//                         //   src={require('../images/powered_by_google_default.png')}\n//                           className=\"Demo__dropdown-footer-image\"\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           }}\n//         </PlacesAutocomplete>\n//         {errorMessage.length > 0 && (\n//           <div className=\"Demo__error-message\">{this.state.errorMessage}</div>\n//         )}\n//         {((latitude && longitude) || isGeocoding) && (\n//           <div>\n//             <h3 className=\"Demo__geocode-result-header\">Geocode result</h3>\n//             {isGeocoding ? (\n//               <div>\n//                 <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw Demo__spinner\" />\n//               </div>\n//             ) : (\n//               <div>\n//                 <div className=\"Demo__geocode-result-item--lat\">\n//                   <label>Latitude:</label>\n//                   <span>{latitude}</span>\n//                 </div>\n//                 <div className=\"Demo__geocode-result-item--lng\">\n//                   <label>Longitude:</label>\n//                   <span>{longitude}</span>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n//   );\n//   }\n// }\n// export default SearchBar;\nimport React, { Component } from 'react';\n\nclass First extends React.Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      allChecked: false,\n      checkedCount: 0,\n      options: [{\n        value: 'selectAll',\n        text: 'Select All'\n      }, {\n        value: 'orange',\n        text: 'Orange'\n      }, {\n        value: 'apple',\n        text: 'Apple'\n      }, {\n        value: 'grape',\n        text: 'Grape'\n      }]\n    };\n  }\n\n  handleClick(e) {\n    let clickedValue = e.target.value;\n\n    if (clickedValue === 'selectAll' && this.refs.selectAll.getDOMNode().checked) {\n      for (let i = 1; i < this.state.options.length; i++) {\n        let value = this.state.options[i].value;\n        this.refs[value].getDOMNode().checked = true;\n      }\n\n      this.setState({\n        checkedCount: this.state.options.length - 1\n      });\n    } else if (clickedValue === 'selectAll' && !this.refs.selectAll.getDOMNode().checked) {\n      for (let i = 1; i < this.state.options.length; i++) {\n        let value = this.state.options[i].value;\n        this.refs[value].getDOMNode().checked = false;\n      }\n\n      this.setState({\n        checkedCount: 0\n      });\n    }\n\n    if (clickedValue !== 'selectAll' && this.refs[clickedValue].getDOMNode().checked) {\n      this.setState({\n        checkedCount: this.state.checkedCount + 1\n      });\n    } else if (clickedValue !== 'selectAll' && !this.refs[clickedValue].getDOMNode().checked) {\n      this.setState({\n        checkedCount: this.state.checkedCount - 1\n      });\n    }\n  }\n\n  render() {\n    console.log('Selected boxes: ', this.state.checkedCount);\n    const options = this.state.options.map(option => {\n      return React.createElement(\"input\", {\n        onClick: this.handleClick,\n        type: \"checkbox\",\n        name: option.value,\n        key: option.value,\n        value: option.value,\n        ref: option.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"SelectBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, options));\n  }\n\n}\n\nexport default First;","map":{"version":3,"sources":["/home/shivendra/Desktop/techoffice/salamvendor/vendorclient/src/map.js"],"names":["React","Component","First","constructor","handleClick","bind","state","allChecked","checkedCount","options","value","text","e","clickedValue","target","refs","selectAll","getDOMNode","checked","i","length","setState","render","console","log","map","option"],"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","sourcesContent":["// import React from 'react';\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n// import { classnames } from './helpers';\n\n// class SearchBar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       address: '',\n//       errorMessage: '',\n//       latitude: null,\n//       longitude: null,\n//       isGeocoding: false,\n//     };\n//   }\n\n//   handleChange = address => {\n//     this.setState({\n//       address,\n//       latitude: null,\n//       longitude: null,\n//       errorMessage: '',\n//     });\n//   };\n\n//   handleSelect = selected => {\n//     this.setState({ isGeocoding: true, address: selected });\n//     geocodeByAddress(selected)\n//       .then(res => getLatLng(res[0]))\n//       .then(({ lat, lng }) => {\n//         this.setState({\n//           latitude: lat,\n//           longitude: lng,\n//           isGeocoding: false,\n//         });\n//       })\n//       .catch(error => {\n//         this.setState({ isGeocoding: false });\n//         console.log('error', error); // eslint-disable-line no-console\n//       });\n//   };\n\n//   handleCloseClick = () => {\n//     this.setState({\n//       address: '',\n//       latitude: null,\n//       longitude: null,\n//     });\n//   };\n\n//   handleError = (status, clearSuggestions) => {\n//     console.log('Error from Google Maps API', status); // eslint-disable-line no-console\n//     this.setState({ errorMessage: status }, () => {\n//       clearSuggestions();\n//     });\n//   };\n\n//   render() {\n//     const {\n//       address,\n//       errorMessage,\n//       latitude,\n//       longitude,\n//       isGeocoding,\n//     } = this.state;\n\n//     return (\n//       <div>\n//         <PlacesAutocomplete\n//           onChange={this.handleChange}\n//           value={address}\n//           onSelect={this.handleSelect}\n//           onError={this.handleError}\n//           shouldFetchSuggestions={address.length > 2}\n//         >\n//           {({ getInputProps, suggestions, getSuggestionItemProps }) => {\n//             return (\n//               <div className=\"Demo__search-bar-container\">\n//                 <div className=\"Demo__search-input-container\">\n//                   <input\n//                     {...getInputProps({\n//                       placeholder: 'Search Places...',\n//                       className: 'Demo__search-input',\n//                     })}\n//                   />\n//                   {this.state.address.length > 0 && (\n//                     <button\n//                       className=\"Demo__clear-button\"\n//                       onClick={this.handleCloseClick}\n//                     >\n//                       x\n//                     </button>\n//                   )}\n//                 </div>\n//                 {suggestions.length > 0 && (\n//                   <div className=\"Demo__autocomplete-container\">\n//                     {suggestions.map(suggestion => {\n//                       const className = classnames('Demo__suggestion-item', {\n//                         'Demo__suggestion-item--active': suggestion.active,\n//                       });\n\n//                       return (\n//                         /* eslint-disable react/jsx-key */\n//                         <div\n//                           {...getSuggestionItemProps(suggestion, { className })}\n//                         >\n//                           <strong>\n//                             {suggestion.formattedSuggestion.mainText}\n//                           </strong>{' '}\n//                           <small>\n//                             {suggestion.formattedSuggestion.secondaryText}\n//                           </small>\n//                         </div>\n//                       );\n//                       /* eslint-enable react/jsx-key */\n//                     })}\n//                     <div className=\"Demo__dropdown-footer\">\n//                       <div>\n//                         <img\n//                         //   src={require('../images/powered_by_google_default.png')}\n//                           className=\"Demo__dropdown-footer-image\"\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           }}\n//         </PlacesAutocomplete>\n//         {errorMessage.length > 0 && (\n//           <div className=\"Demo__error-message\">{this.state.errorMessage}</div>\n//         )}\n\n//         {((latitude && longitude) || isGeocoding) && (\n//           <div>\n//             <h3 className=\"Demo__geocode-result-header\">Geocode result</h3>\n//             {isGeocoding ? (\n//               <div>\n//                 <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw Demo__spinner\" />\n//               </div>\n//             ) : (\n//               <div>\n//                 <div className=\"Demo__geocode-result-item--lat\">\n//                   <label>Latitude:</label>\n//                   <span>{latitude}</span>\n//                 </div>\n//                 <div className=\"Demo__geocode-result-item--lng\">\n//                   <label>Longitude:</label>\n//                   <span>{longitude}</span>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n  \n  \n  \n  \n//   );\n//   }\n// }\n\n// export default SearchBar;\n\nimport React , {Component} from 'react';\n\nclass First extends React.Component {\n  constructor() {\n    super();\n\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      allChecked: false,\n      checkedCount: 0,\n      options: [\n        { value: 'selectAll', text: 'Select All' },\n        { value: 'orange', text: 'Orange' },\n        { value: 'apple', text: 'Apple' },\n        { value: 'grape', text: 'Grape' }\n      ]\n    };\n  }\n\n  handleClick(e) {\n    let clickedValue = e.target.value;\n\n    if (clickedValue === 'selectAll' && this.refs.selectAll.getDOMNode().checked) {\n      for (let i = 1; i < this.state.options.length; i++) {\n        let value = this.state.options[i].value;\n        this.refs[value].getDOMNode().checked = true;\n      }\n      this.setState({\n        checkedCount: this.state.options.length - 1\n      });\n\n    } else if (clickedValue === 'selectAll' && !this.refs.selectAll.getDOMNode().checked) {\n      for (let i = 1; i < this.state.options.length; i++) {\n        let value = this.state.options[i].value;\n        this.refs[value].getDOMNode().checked = false;\n      }\n      this.setState({\n        checkedCount: 0\n      });\n    }\n\n    if (clickedValue !== 'selectAll' && this.refs[clickedValue].getDOMNode().checked) {\n      this.setState({\n        checkedCount: this.state.checkedCount + 1\n      });\n    } else if (clickedValue !== 'selectAll' && !this.refs[clickedValue].getDOMNode().checked) {\n      this.setState({\n        checkedCount: this.state.checkedCount - 1\n      });\n    }\n  }\n\n  render() {\n    console.log('Selected boxes: ', this.state.checkedCount);\n\n    const options = this.state.options.map(option => {\n      return (\n        <input onClick={this.handleClick} type='checkbox' name={option.value} key={option.value}\n               value={option.value} ref={option.value} />\n      );\n    });\n\n\n    return (\n      <div className='SelectBox'>\n        <form>\n          {options}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default First;\n"]},"metadata":{},"sourceType":"module"}