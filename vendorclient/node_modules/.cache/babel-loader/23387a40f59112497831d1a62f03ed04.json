{"ast":null,"code":"var _jsxFileName = \"/home/shivendra/Desktop/techoffice/salamvendor/vendorclient/src/map.js\";\n// import React from 'react';\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n// import { classnames } from './helpers';\n// class SearchBar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       address: '',\n//       errorMessage: '',\n//       latitude: null,\n//       longitude: null,\n//       isGeocoding: false,\n//     };\n//   }\n//   handleChange = address => {\n//     this.setState({\n//       address,\n//       latitude: null,\n//       longitude: null,\n//       errorMessage: '',\n//     });\n//   };\n//   handleSelect = selected => {\n//     this.setState({ isGeocoding: true, address: selected });\n//     geocodeByAddress(selected)\n//       .then(res => getLatLng(res[0]))\n//       .then(({ lat, lng }) => {\n//         this.setState({\n//           latitude: lat,\n//           longitude: lng,\n//           isGeocoding: false,\n//         });\n//       })\n//       .catch(error => {\n//         this.setState({ isGeocoding: false });\n//         console.log('error', error); // eslint-disable-line no-console\n//       });\n//   };\n//   handleCloseClick = () => {\n//     this.setState({\n//       address: '',\n//       latitude: null,\n//       longitude: null,\n//     });\n//   };\n//   handleError = (status, clearSuggestions) => {\n//     console.log('Error from Google Maps API', status); // eslint-disable-line no-console\n//     this.setState({ errorMessage: status }, () => {\n//       clearSuggestions();\n//     });\n//   };\n//   render() {\n//     const {\n//       address,\n//       errorMessage,\n//       latitude,\n//       longitude,\n//       isGeocoding,\n//     } = this.state;\n//     return (\n//       <div>\n//         <PlacesAutocomplete\n//           onChange={this.handleChange}\n//           value={address}\n//           onSelect={this.handleSelect}\n//           onError={this.handleError}\n//           shouldFetchSuggestions={address.length > 2}\n//         >\n//           {({ getInputProps, suggestions, getSuggestionItemProps }) => {\n//             return (\n//               <div className=\"Demo__search-bar-container\">\n//                 <div className=\"Demo__search-input-container\">\n//                   <input\n//                     {...getInputProps({\n//                       placeholder: 'Search Places...',\n//                       className: 'Demo__search-input',\n//                     })}\n//                   />\n//                   {this.state.address.length > 0 && (\n//                     <button\n//                       className=\"Demo__clear-button\"\n//                       onClick={this.handleCloseClick}\n//                     >\n//                       x\n//                     </button>\n//                   )}\n//                 </div>\n//                 {suggestions.length > 0 && (\n//                   <div className=\"Demo__autocomplete-container\">\n//                     {suggestions.map(suggestion => {\n//                       const className = classnames('Demo__suggestion-item', {\n//                         'Demo__suggestion-item--active': suggestion.active,\n//                       });\n//                       return (\n//                         /* eslint-disable react/jsx-key */\n//                         <div\n//                           {...getSuggestionItemProps(suggestion, { className })}\n//                         >\n//                           <strong>\n//                             {suggestion.formattedSuggestion.mainText}\n//                           </strong>{' '}\n//                           <small>\n//                             {suggestion.formattedSuggestion.secondaryText}\n//                           </small>\n//                         </div>\n//                       );\n//                       /* eslint-enable react/jsx-key */\n//                     })}\n//                     <div className=\"Demo__dropdown-footer\">\n//                       <div>\n//                         <img\n//                         //   src={require('../images/powered_by_google_default.png')}\n//                           className=\"Demo__dropdown-footer-image\"\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           }}\n//         </PlacesAutocomplete>\n//         {errorMessage.length > 0 && (\n//           <div className=\"Demo__error-message\">{this.state.errorMessage}</div>\n//         )}\n//         {((latitude && longitude) || isGeocoding) && (\n//           <div>\n//             <h3 className=\"Demo__geocode-result-header\">Geocode result</h3>\n//             {isGeocoding ? (\n//               <div>\n//                 <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw Demo__spinner\" />\n//               </div>\n//             ) : (\n//               <div>\n//                 <div className=\"Demo__geocode-result-item--lat\">\n//                   <label>Latitude:</label>\n//                   <span>{latitude}</span>\n//                 </div>\n//                 <div className=\"Demo__geocode-result-item--lng\">\n//                   <label>Longitude:</label>\n//                   <span>{longitude}</span>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n//   );\n//   }\n// }\n// export default SearchBar;\nimport React, { Component } from 'react';\nimport CheckBox from './map1';\n\nclass First extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAllChecked = event => {\n      let fruites = this.state.fruites;\n      fruites.forEach(fruite => fruite.isChecked = event.target.checked);\n      this.setState({\n        fruites: fruites\n      });\n    };\n\n    this.handleCheckChieldElement = event => {\n      let fruites = this.state.fruites;\n      fruites.forEach(fruite => {\n        if (fruite.value === event.target.value) fruite.isChecked = event.target.checked;\n      });\n      this.setState({\n        fruites: fruites\n      });\n    };\n\n    this.state = {\n      fruites: [{\n        id: 1,\n        value: \"banana\",\n        isChecked: false\n      }, {\n        id: 2,\n        value: \"apple\",\n        isChecked: false\n      }, {\n        id: 3,\n        value: \"mango\",\n        isChecked: false\n      }, {\n        id: 4,\n        value: \"grap\",\n        isChecked: false\n      }]\n    };\n  }\n\n  render() {\n    // console.log('77777777777',this.state.fruites)\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \" Check and Uncheck All Example \"), React.createElement(\"input\", {\n      type: \"checkbox\",\n      onClick: this.handleAllChecked,\n      value: \"checkedall\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), \" Check / Uncheck All\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, this.state.fruites.map(fruite => {\n      return React.createElement(CheckBox, Object.assign({\n        handleCheckChieldElement: this.handleCheckChieldElement\n      }, fruite, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }));\n    })));\n  }\n\n}\n\nexport default First;","map":{"version":3,"sources":["/home/shivendra/Desktop/techoffice/salamvendor/vendorclient/src/map.js"],"names":["React","Component","CheckBox","First","constructor","props","handleAllChecked","event","fruites","state","forEach","fruite","isChecked","target","checked","setState","handleCheckChieldElement","value","id","render","map"],"mappings":";AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAQC,QAAR,MAAuB,QAAvB;;AAEA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAC9BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAYnBC,gBAZmB,GAYCC,KAAD,IAAW;AAC5B,UAAIC,OAAO,GAAG,KAAKC,KAAL,CAAWD,OAAzB;AACAA,MAAAA,OAAO,CAACE,OAAR,CAAgBC,MAAM,IAAIA,MAAM,CAACC,SAAP,GAAmBL,KAAK,CAACM,MAAN,CAAaC,OAA1D;AACA,WAAKC,QAAL,CAAc;AAACP,QAAAA,OAAO,EAAEA;AAAV,OAAd;AACD,KAhBkB;;AAAA,SAkBnBQ,wBAlBmB,GAkBST,KAAD,IAAW;AACpC,UAAIC,OAAO,GAAG,KAAKC,KAAL,CAAWD,OAAzB;AACAA,MAAAA,OAAO,CAACE,OAAR,CAAgBC,MAAM,IAAI;AACvB,YAAIA,MAAM,CAACM,KAAP,KAAiBV,KAAK,CAACM,MAAN,CAAaI,KAAlC,EACGN,MAAM,CAACC,SAAP,GAAoBL,KAAK,CAACM,MAAN,CAAaC,OAAjC;AACL,OAHD;AAIA,WAAKC,QAAL,CAAc;AAACP,QAAAA,OAAO,EAAEA;AAAV,OAAd;AACD,KAzBkB;;AAEjB,SAAKC,KAAL,GAAa;AACXD,MAAAA,OAAO,EAAE,CACP;AAACU,QAAAA,EAAE,EAAE,CAAL;AAAQD,QAAAA,KAAK,EAAE,QAAf;AAAyBL,QAAAA,SAAS,EAAE;AAApC,OADO,EAEP;AAACM,QAAAA,EAAE,EAAE,CAAL;AAAQD,QAAAA,KAAK,EAAE,OAAf;AAAwBL,QAAAA,SAAS,EAAE;AAAnC,OAFO,EAGP;AAACM,QAAAA,EAAE,EAAE,CAAL;AAAQD,QAAAA,KAAK,EAAE,OAAf;AAAwBL,QAAAA,SAAS,EAAE;AAAnC,OAHO,EAIP;AAACM,QAAAA,EAAE,EAAE,CAAL;AAAQD,QAAAA,KAAK,EAAE,MAAf;AAAuBL,QAAAA,SAAS,EAAE;AAAlC,OAJO;AADE,KAAb;AAQD;;AAiBDO,EAAAA,MAAM,GAAG;AACP;AACA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADA,EAEA;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,OAAO,EAAE,KAAKb,gBAArC;AAAwD,MAAA,KAAK,EAAC,YAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,0BAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,KAAKG,KAAL,CAAWD,OAAX,CAAmBY,GAAnB,CAAwBT,MAAD,IAAY;AACjC,aAAQ,oBAAC,QAAD;AAAU,QAAA,wBAAwB,EAAE,KAAKK;AAAzC,SAAwEL,MAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAR;AACD,KAFD,CAFF,CAHF,CADF;AAaD;;AA3C6B;;AA8C9B,eAAeR,KAAf","sourcesContent":["// import React from 'react';\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n// import { classnames } from './helpers';\n\n// class SearchBar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       address: '',\n//       errorMessage: '',\n//       latitude: null,\n//       longitude: null,\n//       isGeocoding: false,\n//     };\n//   }\n\n//   handleChange = address => {\n//     this.setState({\n//       address,\n//       latitude: null,\n//       longitude: null,\n//       errorMessage: '',\n//     });\n//   };\n\n//   handleSelect = selected => {\n//     this.setState({ isGeocoding: true, address: selected });\n//     geocodeByAddress(selected)\n//       .then(res => getLatLng(res[0]))\n//       .then(({ lat, lng }) => {\n//         this.setState({\n//           latitude: lat,\n//           longitude: lng,\n//           isGeocoding: false,\n//         });\n//       })\n//       .catch(error => {\n//         this.setState({ isGeocoding: false });\n//         console.log('error', error); // eslint-disable-line no-console\n//       });\n//   };\n\n//   handleCloseClick = () => {\n//     this.setState({\n//       address: '',\n//       latitude: null,\n//       longitude: null,\n//     });\n//   };\n\n//   handleError = (status, clearSuggestions) => {\n//     console.log('Error from Google Maps API', status); // eslint-disable-line no-console\n//     this.setState({ errorMessage: status }, () => {\n//       clearSuggestions();\n//     });\n//   };\n\n//   render() {\n//     const {\n//       address,\n//       errorMessage,\n//       latitude,\n//       longitude,\n//       isGeocoding,\n//     } = this.state;\n\n//     return (\n//       <div>\n//         <PlacesAutocomplete\n//           onChange={this.handleChange}\n//           value={address}\n//           onSelect={this.handleSelect}\n//           onError={this.handleError}\n//           shouldFetchSuggestions={address.length > 2}\n//         >\n//           {({ getInputProps, suggestions, getSuggestionItemProps }) => {\n//             return (\n//               <div className=\"Demo__search-bar-container\">\n//                 <div className=\"Demo__search-input-container\">\n//                   <input\n//                     {...getInputProps({\n//                       placeholder: 'Search Places...',\n//                       className: 'Demo__search-input',\n//                     })}\n//                   />\n//                   {this.state.address.length > 0 && (\n//                     <button\n//                       className=\"Demo__clear-button\"\n//                       onClick={this.handleCloseClick}\n//                     >\n//                       x\n//                     </button>\n//                   )}\n//                 </div>\n//                 {suggestions.length > 0 && (\n//                   <div className=\"Demo__autocomplete-container\">\n//                     {suggestions.map(suggestion => {\n//                       const className = classnames('Demo__suggestion-item', {\n//                         'Demo__suggestion-item--active': suggestion.active,\n//                       });\n\n//                       return (\n//                         /* eslint-disable react/jsx-key */\n//                         <div\n//                           {...getSuggestionItemProps(suggestion, { className })}\n//                         >\n//                           <strong>\n//                             {suggestion.formattedSuggestion.mainText}\n//                           </strong>{' '}\n//                           <small>\n//                             {suggestion.formattedSuggestion.secondaryText}\n//                           </small>\n//                         </div>\n//                       );\n//                       /* eslint-enable react/jsx-key */\n//                     })}\n//                     <div className=\"Demo__dropdown-footer\">\n//                       <div>\n//                         <img\n//                         //   src={require('../images/powered_by_google_default.png')}\n//                           className=\"Demo__dropdown-footer-image\"\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           }}\n//         </PlacesAutocomplete>\n//         {errorMessage.length > 0 && (\n//           <div className=\"Demo__error-message\">{this.state.errorMessage}</div>\n//         )}\n\n//         {((latitude && longitude) || isGeocoding) && (\n//           <div>\n//             <h3 className=\"Demo__geocode-result-header\">Geocode result</h3>\n//             {isGeocoding ? (\n//               <div>\n//                 <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw Demo__spinner\" />\n//               </div>\n//             ) : (\n//               <div>\n//                 <div className=\"Demo__geocode-result-item--lat\">\n//                   <label>Latitude:</label>\n//                   <span>{latitude}</span>\n//                 </div>\n//                 <div className=\"Demo__geocode-result-item--lng\">\n//                   <label>Longitude:</label>\n//                   <span>{longitude}</span>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n  \n  \n  \n  \n//   );\n//   }\n// }\n\n// export default SearchBar;\n\nimport React, { Component } from 'react';\nimport  CheckBox  from './map1'\n\nclass First extends Component {\nconstructor(props) {\n  super(props)\n  this.state = {\n    fruites: [\n      {id: 1, value: \"banana\", isChecked: false},\n      {id: 2, value: \"apple\", isChecked: false},\n      {id: 3, value: \"mango\", isChecked: false},\n      {id: 4, value: \"grap\", isChecked: false}\n    ]\n  }\n}\n\nhandleAllChecked = (event) => {\n  let fruites = this.state.fruites\n  fruites.forEach(fruite => fruite.isChecked = event.target.checked) \n  this.setState({fruites: fruites})\n}\n\nhandleCheckChieldElement = (event) => {\n  let fruites = this.state.fruites\n  fruites.forEach(fruite => {\n     if (fruite.value === event.target.value)\n        fruite.isChecked =  event.target.checked\n  })\n  this.setState({fruites: fruites})\n}\n\nrender() {\n  // console.log('77777777777',this.state.fruites)\n  return (\n    <div className=\"App\">\n    <h1> Check and Uncheck All Example </h1>\n    <input type=\"checkbox\" onClick={this.handleAllChecked}  value=\"checkedall\" /> Check / Uncheck All\n      <ul>\n      {\n        this.state.fruites.map((fruite) => {\n          return (<CheckBox handleCheckChieldElement={this.handleCheckChieldElement}  {...fruite} />)\n        })\n      }\n      </ul>\n    </div>\n  );\n}\n}\n\nexport default First;\n"]},"metadata":{},"sourceType":"module"}