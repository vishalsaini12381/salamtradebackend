{"ast":null,"code":"var _jsxFileName = \"/home/shivendra/Desktop/techoffice/salamvendor/vendorclient/src/map.js\";\n// import React from 'react';\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n// import { classnames } from './helpers';\n// class SearchBar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       address: '',\n//       errorMessage: '',\n//       latitude: null,\n//       longitude: null,\n//       isGeocoding: false,\n//     };\n//   }\n//   handleChange = address => {\n//     this.setState({\n//       address,\n//       latitude: null,\n//       longitude: null,\n//       errorMessage: '',\n//     });\n//   };\n//   handleSelect = selected => {\n//     this.setState({ isGeocoding: true, address: selected });\n//     geocodeByAddress(selected)\n//       .then(res => getLatLng(res[0]))\n//       .then(({ lat, lng }) => {\n//         this.setState({\n//           latitude: lat,\n//           longitude: lng,\n//           isGeocoding: false,\n//         });\n//       })\n//       .catch(error => {\n//         this.setState({ isGeocoding: false });\n//         console.log('error', error); // eslint-disable-line no-console\n//       });\n//   };\n//   handleCloseClick = () => {\n//     this.setState({\n//       address: '',\n//       latitude: null,\n//       longitude: null,\n//     });\n//   };\n//   handleError = (status, clearSuggestions) => {\n//     console.log('Error from Google Maps API', status); // eslint-disable-line no-console\n//     this.setState({ errorMessage: status }, () => {\n//       clearSuggestions();\n//     });\n//   };\n//   render() {\n//     const {\n//       address,\n//       errorMessage,\n//       latitude,\n//       longitude,\n//       isGeocoding,\n//     } = this.state;\n//     return (\n//       <div>\n//         <PlacesAutocomplete\n//           onChange={this.handleChange}\n//           value={address}\n//           onSelect={this.handleSelect}\n//           onError={this.handleError}\n//           shouldFetchSuggestions={address.length > 2}\n//         >\n//           {({ getInputProps, suggestions, getSuggestionItemProps }) => {\n//             return (\n//               <div className=\"Demo__search-bar-container\">\n//                 <div className=\"Demo__search-input-container\">\n//                   <input\n//                     {...getInputProps({\n//                       placeholder: 'Search Places...',\n//                       className: 'Demo__search-input',\n//                     })}\n//                   />\n//                   {this.state.address.length > 0 && (\n//                     <button\n//                       className=\"Demo__clear-button\"\n//                       onClick={this.handleCloseClick}\n//                     >\n//                       x\n//                     </button>\n//                   )}\n//                 </div>\n//                 {suggestions.length > 0 && (\n//                   <div className=\"Demo__autocomplete-container\">\n//                     {suggestions.map(suggestion => {\n//                       const className = classnames('Demo__suggestion-item', {\n//                         'Demo__suggestion-item--active': suggestion.active,\n//                       });\n//                       return (\n//                         /* eslint-disable react/jsx-key */\n//                         <div\n//                           {...getSuggestionItemProps(suggestion, { className })}\n//                         >\n//                           <strong>\n//                             {suggestion.formattedSuggestion.mainText}\n//                           </strong>{' '}\n//                           <small>\n//                             {suggestion.formattedSuggestion.secondaryText}\n//                           </small>\n//                         </div>\n//                       );\n//                       /* eslint-enable react/jsx-key */\n//                     })}\n//                     <div className=\"Demo__dropdown-footer\">\n//                       <div>\n//                         <img\n//                         //   src={require('../images/powered_by_google_default.png')}\n//                           className=\"Demo__dropdown-footer-image\"\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           }}\n//         </PlacesAutocomplete>\n//         {errorMessage.length > 0 && (\n//           <div className=\"Demo__error-message\">{this.state.errorMessage}</div>\n//         )}\n//         {((latitude && longitude) || isGeocoding) && (\n//           <div>\n//             <h3 className=\"Demo__geocode-result-header\">Geocode result</h3>\n//             {isGeocoding ? (\n//               <div>\n//                 <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw Demo__spinner\" />\n//               </div>\n//             ) : (\n//               <div>\n//                 <div className=\"Demo__geocode-result-item--lat\">\n//                   <label>Latitude:</label>\n//                   <span>{latitude}</span>\n//                 </div>\n//                 <div className=\"Demo__geocode-result-item--lng\">\n//                   <label>Longitude:</label>\n//                   <span>{longitude}</span>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n//   );\n//   }\n// }\n// export default SearchBar;\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport Checkbox from './map1';\nimport './style.css';\nconst checkboxes = [{\n  name: 'check-box-1',\n  key: 'checkBox1',\n  label: 'Check Box 1'\n}, {\n  name: 'check-box-2',\n  key: 'checkBox2',\n  label: 'Check Box 2'\n}, {\n  name: 'check-box-3',\n  key: 'checkBox3',\n  label: 'Check Box 3'\n}, {\n  name: 'check-box-4',\n  key: 'checkBox4',\n  label: 'Check Box 4'\n}];\n\nclass First extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.showList = () => this.setState(prevState => ({\n      showActionFilterList: !prevState.showActionFilterList\n    }));\n\n    this.state = {\n      showActionFilterList: false,\n      checkedItems: new Map()\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    const item = e.target.name;\n    const isChecked = e.target.checked;\n    this.setState(prevState => ({\n      checkedItems: prevState.checkedItems.set(item, isChecked)\n    }));\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"p\", {\n      onClick: this.showList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"click\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), this.state.showActionFilterList && React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, checkboxes.map(item => React.createElement(\"label\", {\n      key: item.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, item.name, React.createElement(Checkbox, {\n      name: item.name,\n      checked: this.state.checkedItems.get(item.name),\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default First;","map":{"version":3,"sources":["/home/shivendra/Desktop/techoffice/salamvendor/vendorclient/src/map.js"],"names":["React","Component","render","Checkbox","checkboxes","name","key","label","First","constructor","props","showList","setState","prevState","showActionFilterList","state","checkedItems","Map","handleChange","bind","e","item","target","isChecked","checked","set","map","get"],"mappingsgBC,SAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,QAAP,MAAsB,QAAtB;AACA,OAAO,aAAP;AAEA,MAAMC,UAAU,GAAG,CACjB;AACEC,EAAAA,IAAI,EAAE,aADR;AAEEC,EAAAA,GAAG,EAAE,WAFP;AAGEC,EAAAA,KAAK,EAAE;AAHT,CADiB,EAMjB;AACEF,EAAAA,IAAI,EAAE,aADR;AAEEC,EAAAA,GAAG,EAAE,WAFP;AAGEC,EAAAA,KAAK,EAAE;AAHT,CANiB,EAWjB;AACEF,EAAAA,IAAI,EAAE,aADR;AAEEC,EAAAA,GAAG,EAAE,WAFP;AAGEC,EAAAA,KAAK,EAAE;AAHT,CAXiB,EAgBjB;AACEF,EAAAA,IAAI,EAAE,aADR;AAEEC,EAAAA,GAAG,EAAE,WAFP;AAGEC,EAAAA,KAAK,EAAE;AAHT,CAhBiB,CAAnB;;AAuBA,MAAMC,KAAN,SAAoBR,KAAK,CAACC,SAA1B,CAAoC;AAClCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAWnBC,QAXmB,GAWR,MAAM,KAAKC,QAAL,CAAcC,SAAS,KAAK;AACvCC,MAAAA,oBAAoB,EAAE,CAACD,SAAS,CAACC;AADM,KAAL,CAAvB,CAXE;;AAGjB,SAAKC,KAAL,GAAa;AACXD,MAAAA,oBAAoB,EAAE,KADX;AAEXE,MAAAA,YAAY,EAAE,IAAIC,GAAJ;AAFH,KAAb;AAKA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAMDD,EAAAA,YAAY,CAACE,CAAD,EAAI;AACd,UAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASjB,IAAtB;AACA,UAAMkB,SAAS,GAAGH,CAAC,CAACE,MAAF,CAASE,OAA3B;AACA,SAAKZ,QAAL,CAAcC,SAAS,KAAK;AAAEG,MAAAA,YAAY,EAAEH,SAAS,CAACG,YAAV,CAAuBS,GAAvB,CAA2BJ,IAA3B,EAAiCE,SAAjC;AAAhB,KAAL,CAAvB;AACD;;AAEDrB,EAAAA,MAAM,GAAG;AACP,WACE,0CACA;AAAG,MAAA,OAAO,EAAE,KAAKS,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADA,EACoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADpC,EAEC,KAAKI,KAAL,CAAWD,oBAAX,IACD,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEIV,UAAU,CAACsB,GAAX,CAAeL,IAAI,IACjB;AAAO,MAAA,GAAG,EAAEA,IAAI,CAACf,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGe,IAAI,CAAChB,IADR,EAEE,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAEgB,IAAI,CAAChB,IAArB;AAA2B,MAAA,OAAO,EAAE,KAAKU,KAAL,CAAWC,YAAX,CAAwBW,GAAxB,CAA4BN,IAAI,CAAChB,IAAjC,CAApC;AAA4E,MAAA,QAAQ,EAAE,KAAKa,YAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CAFJ,CAHA,CADF;AAgBD;;AAvCiC;;AA0CpC,eAAeV,KAAf","sourcesContent":["// import React from 'react';\n// import PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n// import { classnames } from './helpers';\n\n// class SearchBar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       address: '',\n//       errorMessage: '',\n//       latitude: null,\n//       longitude: null,\n//       isGeocoding: false,\n//     };\n//   }\n\n//   handleChange = address => {\n//     this.setState({\n//       address,\n//       latitude: null,\n//       longitude: null,\n//       errorMessage: '',\n//     });\n//   };\n\n//   handleSelect = selected => {\n//     this.setState({ isGeocoding: true, address: selected });\n//     geocodeByAddress(selected)\n//       .then(res => getLatLng(res[0]))\n//       .then(({ lat, lng }) => {\n//         this.setState({\n//           latitude: lat,\n//           longitude: lng,\n//           isGeocoding: false,\n//         });\n//       })\n//       .catch(error => {\n//         this.setState({ isGeocoding: false });\n//         console.log('error', error); // eslint-disable-line no-console\n//       });\n//   };\n\n//   handleCloseClick = () => {\n//     this.setState({\n//       address: '',\n//       latitude: null,\n//       longitude: null,\n//     });\n//   };\n\n//   handleError = (status, clearSuggestions) => {\n//     console.log('Error from Google Maps API', status); // eslint-disable-line no-console\n//     this.setState({ errorMessage: status }, () => {\n//       clearSuggestions();\n//     });\n//   };\n\n//   render() {\n//     const {\n//       address,\n//       errorMessage,\n//       latitude,\n//       longitude,\n//       isGeocoding,\n//     } = this.state;\n\n//     return (\n//       <div>\n//         <PlacesAutocomplete\n//           onChange={this.handleChange}\n//           value={address}\n//           onSelect={this.handleSelect}\n//           onError={this.handleError}\n//           shouldFetchSuggestions={address.length > 2}\n//         >\n//           {({ getInputProps, suggestions, getSuggestionItemProps }) => {\n//             return (\n//               <div className=\"Demo__search-bar-container\">\n//                 <div className=\"Demo__search-input-container\">\n//                   <input\n//                     {...getInputProps({\n//                       placeholder: 'Search Places...',\n//                       className: 'Demo__search-input',\n//                     })}\n//                   />\n//                   {this.state.address.length > 0 && (\n//                     <button\n//                       className=\"Demo__clear-button\"\n//                       onClick={this.handleCloseClick}\n//                     >\n//                       x\n//                     </button>\n//                   )}\n//                 </div>\n//                 {suggestions.length > 0 && (\n//                   <div className=\"Demo__autocomplete-container\">\n//                     {suggestions.map(suggestion => {\n//                       const className = classnames('Demo__suggestion-item', {\n//                         'Demo__suggestion-item--active': suggestion.active,\n//                       });\n\n//                       return (\n//                         /* eslint-disable react/jsx-key */\n//                         <div\n//                           {...getSuggestionItemProps(suggestion, { className })}\n//                         >\n//                           <strong>\n//                             {suggestion.formattedSuggestion.mainText}\n//                           </strong>{' '}\n//                           <small>\n//                             {suggestion.formattedSuggestion.secondaryText}\n//                           </small>\n//                         </div>\n//                       );\n//                       /* eslint-enable react/jsx-key */\n//                     })}\n//                     <div className=\"Demo__dropdown-footer\">\n//                       <div>\n//                         <img\n//                         //   src={require('../images/powered_by_google_default.png')}\n//                           className=\"Demo__dropdown-footer-image\"\n//                         />\n//                       </div>\n//                     </div>\n//                   </div>\n//                 )}\n//               </div>\n//             );\n//           }}\n//         </PlacesAutocomplete>\n//         {errorMessage.length > 0 && (\n//           <div className=\"Demo__error-message\">{this.state.errorMessage}</div>\n//         )}\n\n//         {((latitude && longitude) || isGeocoding) && (\n//           <div>\n//             <h3 className=\"Demo__geocode-result-header\">Geocode result</h3>\n//             {isGeocoding ? (\n//               <div>\n//                 <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw Demo__spinner\" />\n//               </div>\n//             ) : (\n//               <div>\n//                 <div className=\"Demo__geocode-result-item--lat\">\n//                   <label>Latitude:</label>\n//                   <span>{latitude}</span>\n//                 </div>\n//                 <div className=\"Demo__geocode-result-item--lng\">\n//                   <label>Longitude:</label>\n//                   <span>{longitude}</span>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         )}\n//       </div>\n  \n  \n  \n  \n//   );\n//   }\n// }\n\n// export default SearchBar;\n\nimport React , {Component} from 'react';\nimport { render } from 'react-dom';\nimport Checkbox  from './map1';\nimport './style.css';\n\nconst checkboxes = [\n  {\n    name: 'check-box-1',\n    key: 'checkBox1',\n    label: 'Check Box 1',\n  },\n  {\n    name: 'check-box-2',\n    key: 'checkBox2',\n    label: 'Check Box 2',\n  },\n  {\n    name: 'check-box-3',\n    key: 'checkBox3',\n    label: 'Check Box 3',\n  },\n  {\n    name: 'check-box-4',\n    key: 'checkBox4',\n    label: 'Check Box 4',\n  },\n];\n\nclass First extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showActionFilterList: false,\n      checkedItems: new Map(),\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  showList = () => this.setState(prevState => ({\n        showActionFilterList: !prevState.showActionFilterList\n    }));  \n\n  handleChange(e) {\n    const item = e.target.name;\n    const isChecked = e.target.checked;\n    this.setState(prevState => ({ checkedItems: prevState.checkedItems.set(item, isChecked) }));\n  }\n\n  render() {\n    return (\n      <>\n      <p onClick={this.showList}>click</p><br/>\n      {this.state.showActionFilterList &&\n      <React.Fragment>\n        {\n          checkboxes.map(item => (\n            <label key={item.key}>\n              {item.name}\n              <Checkbox name={item.name} checked={this.state.checkedItems.get(item.name)} onChange={this.handleChange} />\n            </label>\n          ))\n        }\n      </React.Fragment>}\n      </>\n    );\n  }\n}\n\nexport default First;\n"]},"metadata":{},"sourceType":"module"}