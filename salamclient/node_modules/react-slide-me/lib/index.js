'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Slider = function (_React$Component) {
    _inherits(Slider, _React$Component);

    function Slider(props) {
        _classCallCheck(this, Slider);

        var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));

        _this.btnPrevious = function () {
            var animation = _this.props.animation;


            switch (animation) {
                case 'fade':
                    _this.slideFadePrevious();
                    break;
                case 'moveHorizontal':
                    _this.slideMoveHorizontalPrevious();
                    break;
                case 'moveVertical':
                    _this.slideMoveVerticalPrevious();
                    break;
                default:
                    _this.slideFadePrevious();
            }
        };

        _this.btnNext = function () {
            var animation = _this.props.animation;


            switch (animation) {
                case 'fade':
                    _this.slideFadeNext();
                    break;
                case 'moveHorizontal':
                    _this.slideMoveHorizontalNext();
                    break;
                case 'moveVertical':
                    _this.slideMoveVerticalNext();
                    break;
                default:
                    _this.slideFadeNext();
            }
        };

        _this.slider = null;
        _this.sliderItems = [];
        return _this;
    }

    _createClass(Slider, [{
        key: 'slideFadePrevious',


        /**
         * fade slide previous
         */
        value: function slideFadePrevious() {

            var currItem = this.getCurrentItem();
            var prevItem = this.getPreviousItem();

            // place previous slide above current slide
            prevItem.style.zIndex = parseInt(currItem.style.zIndex) + 1;

            // fade out current slide while fading in next slide just by using css animations
            currItem.style.opacity = 0;
            prevItem.style.opacity = 1;

            // change active slide
            prevItem.classList.add('active');
            currItem.classList.remove('active');
        }

        /**
         * slide fade next
         */

    }, {
        key: 'slideFadeNext',
        value: function slideFadeNext() {

            var currItem = this.getCurrentItem();
            var nextItem = this.getNextItem();

            // place next slide above current slide
            nextItem.style.zIndex = parseInt(currItem.style.zIndex) + 1;

            // fade out current slide while fading in next slide just by using css animations
            currItem.style.opacity = 0;
            nextItem.style.opacity = 1;

            // change active slide
            nextItem.classList.add('active');
            currItem.classList.remove('active');
        }

        /**
         * slide move horizontal previous
         */

    }, {
        key: 'slideMoveHorizontalPrevious',
        value: function slideMoveHorizontalPrevious() {
            var _this2 = this;

            var speed = this.props.speed;


            var currItem = this.getCurrentItem();
            var prevItem = this.getPreviousItem();

            prevItem.style.transition = 'none';
            prevItem.style.left = '-' + this.getSliderWidth() + 'px';

            window.setTimeout(function () {
                prevItem.style.transition = _this2.getSliderTransition();
                currItem.style.left = _this2.getSliderWidth() + 'px';
                prevItem.style.left = 0;

                prevItem.classList.add('active');
                currItem.classList.remove('active');
            }, 10);
        }

        /**
         * slide move horizontal next
         */

    }, {
        key: 'slideMoveHorizontalNext',
        value: function slideMoveHorizontalNext() {
            var _this3 = this;

            var speed = this.props.speed;


            var currItem = this.getCurrentItem();
            var nextItem = this.getNextItem();

            // place next slide next to current slide
            nextItem.style.transition = 'none';
            nextItem.style.left = this.getSliderWidth() + 'px';

            window.setTimeout(function () {
                nextItem.style.transition = _this3.getSliderTransition();
                currItem.style.left = '-' + _this3.getSliderWidth() + 'px';
                nextItem.style.left = 0;

                nextItem.classList.add('active');
                currItem.classList.remove('active');
            }, 10);
        }

        /**
         * slide move vertical previous
         */

    }, {
        key: 'slideMoveVerticalPrevious',
        value: function slideMoveVerticalPrevious() {
            var _this4 = this;

            var speed = this.props.speed;


            var currItem = this.getCurrentItem();
            var prevItem = this.getPreviousItem();

            prevItem.style.transition = 'none';
            prevItem.style.top = '-' + this.getSliderHeight() + 'px';

            window.setTimeout(function () {
                prevItem.style.transition = _this4.getSliderTransition();
                currItem.style.top = _this4.getSliderHeight() + 'px';
                prevItem.style.top = 0;

                prevItem.classList.add('active');
                currItem.classList.remove('active');
            }, 10);
        }

        /**
         * slide move vertical next
         */

    }, {
        key: 'slideMoveVerticalNext',
        value: function slideMoveVerticalNext() {
            var _this5 = this;

            var speed = this.props.speed;


            var currItem = this.getCurrentItem();
            var nextItem = this.getNextItem();

            // place next slide next to current slide
            nextItem.style.transition = 'none';
            nextItem.style.top = this.getSliderHeight() + 'px';

            window.setTimeout(function () {
                nextItem.style.transition = _this5.getSliderTransition();
                currItem.style.top = '-' + _this5.getSliderHeight() + 'px';
                nextItem.style.top = 0;

                nextItem.classList.add('active');
                currItem.classList.remove('active');
            }, 10);
        }

        /**
         * get current slider item
         * @return {object}
         */

    }, {
        key: 'getCurrentItem',
        value: function getCurrentItem() {
            for (var i = 0; i < this.sliderItems.length; i++) {
                var item = this.sliderItems[i];

                if (item.classList.contains('active')) {
                    return item;
                }
            }
        }

        /**
         * get previous slider item
         * @return {object}
         */

    }, {
        key: 'getPreviousItem',
        value: function getPreviousItem() {
            for (var i = 0; i < this.sliderItems.length; i++) {
                var item = this.sliderItems[i];

                if (item.classList.contains('active')) {
                    if (i === 0) {
                        return this.sliderItems[this.sliderItems.length - 1];
                    }
                    return this.sliderItems[i - 1];
                }
            }
        }

        /**
         * get next slider item
         * @return {object}
         */

    }, {
        key: 'getNextItem',
        value: function getNextItem() {
            for (var i = 0; i < this.sliderItems.length; i++) {
                var item = this.sliderItems[i];

                if (item.classList.contains('active')) {
                    if (i === this.sliderItems.length - 1) {
                        return this.sliderItems[0];
                    }
                    return this.sliderItems[i + 1];
                }
            }
        }

        /**
         * get slider transition
         * @return {string}
         */

    }, {
        key: 'getSliderTransition',
        value: function getSliderTransition() {
            var _props = this.props,
                speed = _props.speed,
                easing = _props.easing;

            return 'all ' + speed + 'ms ' + easing;
        }

        /**
         * get slider width
         * @return {number}
         */

    }, {
        key: 'getSliderWidth',
        value: function getSliderWidth() {
            return this.slider.clientWidth;
        }

        /**
         * get slider height
         * @return {number}
         */

    }, {
        key: 'getSliderHeight',
        value: function getSliderHeight() {
            return this.slider.clientHeight;
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var animation = this.props.animation;


            this.slider = this.refs['slide-me-container'];
            this.sliderItems = this.slider.querySelectorAll('.slider-item');

            for (var i = 0; i < this.sliderItems.length; i++) {
                var item = this.sliderItems[i];

                if (item.classList.contains('active')) {
                    switch (animation) {
                        case 'fade':
                            item.style.opacity = 1;
                            break;
                        case 'moveHorizontal':
                            item.style.left = 0;
                            break;
                        case 'moveVertical':
                            item.style.top = 0;
                            break;
                        default:
                            item.style.opacity = 1;
                    }
                }
            }
        }

        /**
         * all the visual magic happens here
         * @return jsx/html
         */

    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                items = _props2.items,
                size = _props2.size,
                type = _props2.type,
                speed = _props2.speed,
                animation = _props2.animation;


            var styles = {
                container: {
                    position: 'relative',
                    display: 'inline-block',
                    width: size.width,
                    height: size.height,
                    overflow: 'hidden'
                },
                containerItem: {
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    width: size.width,
                    height: size.height,
                    zIndex: 100,
                    transition: this.getSliderTransition()
                },
                btnPrevious: {
                    position: 'absolute',
                    left: '10px',
                    top: '50%',
                    transform: 'translateY(-50%)',
                    zIndex: '99999'
                },
                btnNext: {
                    position: 'absolute',
                    right: '10px',
                    top: '50%',
                    transform: 'translateY(-50%)',
                    zIndex: '99999'
                }
            };

            switch (animation) {
                case 'fade':
                    styles.containerItem.opacity = 0;
                    break;
                case 'moveHorizontal':
                    styles.containerItem.left = size.width;
                    break;
                case 'moveVertical':
                    styles.containerItem.top = size.height;
                    break;
                default:
                    styles.containerItem.opacity = 0;
            }

            var mapedItems = [];
            if (type === 'image') {
                mapedItems = items.map(function (item, index) {
                    var itemClass = 'slider-item';

                    if (index === 0) {
                        itemClass = itemClass + ' active';
                    }

                    if (typeof item === 'string') {
                        return _react2.default.createElement(
                            'div',
                            { key: index, ref: 'slider-item', style: styles.containerItem, className: itemClass },
                            _react2.default.createElement('img', { key: index, src: item, alt: item })
                        );
                    } else if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object') {
                        return _react2.default.createElement(
                            'div',
                            { key: index, ref: 'slider-item', style: styles.containerItem, className: itemClass },
                            _react2.default.createElement('img', { src: item.url, alt: item.alt })
                        );
                    }
                });
            }

            return _react2.default.createElement(
                'div',
                { ref: 'slide-me-container', className: this.uniqueSliderID, style: styles.container },
                _react2.default.createElement(
                    'button',
                    { style: styles.btnPrevious, onClick: this.btnPrevious },
                    'previous'
                ),
                _react2.default.createElement(
                    'button',
                    { style: styles.btnNext, onClick: this.btnNext },
                    'next'
                ),
                mapedItems
            );
        }
    }]);

    return Slider;
}(_react2.default.Component);

Slider.propTypes = {
    items: _react2.default.PropTypes.array,
    type: _react2.default.PropTypes.string,
    size: _react2.default.PropTypes.object,
    animation: _react2.default.PropTypes.string,
    speed: _react2.default.PropTypes.number,
    easing: _react2.default.PropTypes.string
};
Slider.defaultProps = {
    animation: 'fade',
    speed: 1000,
    easing: 'linear'
};
exports.default = Slider;
