{
  "_from": "react-bs-datatable",
  "_id": "react-bs-datatable@1.2.8",
  "_inBundle": false,
  "_integrity": "sha512-oTzlvzP1267Hta4DqquiUZN8m6cFtjvHgboWjzVHdx5pT3e4ZWlMAQTo6KMsncn90LbyaGDz9eh7a1hHibHL+A==",
  "_location": "/react-bs-datatable",
  "_phantomChildren": {
    "babel-runtime": "6.26.0",
    "classnames": "2.2.6",
    "create-react-class": "15.6.3",
    "dom-helpers": "3.4.0",
    "fbjs": "0.8.17",
    "invariant": "2.2.4",
    "keycode": "2.2.0",
    "loose-envify": "1.4.0",
    "object-assign": "4.1.1",
    "prop-types": "15.7.2",
    "prop-types-extra": "1.1.0"
  },
  "_requested": {
    "escapedName": "react-bs-datatable",
    "fetchSpec": "latest",
    "name": "react-bs-datatable",
    "raw": "react-bs-datatable",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-bs-datatable/-/react-bs-datatable-1.2.8.tgz",
  "_shasum": "e5ae4a3b96aaef4fa793f854c968e1c8645080d7",
  "_spec": "react-bs-datatable",
  "_where": "/home/shivendra/Desktop/techoffice/salamtrade/salamclient",
  "author": {
    "name": "Try Ajitiono"
  },
  "bugs": {
    "url": "https://github.com/Imballinst/react-bs-datatable/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "classnames": "^2.2.5",
    "lodash": "^4.17.4",
    "prop-types": "^15.5.8",
    "react": "^15.5.4",
    "react-bootstrap": "^0.31.0",
    "react-dom": "^15.5.4"
  },
  "deprecated": false,
  "description": "React Bootstrap Datatable (without jQuery) with sorting, filter, and pagination",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-eslint": "^7.2.3",
    "babel-jest": "^20.0.0",
    "babel-loader": "^7.0.0",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.26.0",
    "babel-preset-env": "^1.6.1",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-2": "^6.24.1",
    "babel-register": "^6.24.1",
    "enzyme": "^2.8.2",
    "enzyme-to-json": "^1.5.1",
    "eslint": "^3.19.0",
    "eslint-config-airbnb": "^15.0.1",
    "eslint-plugin-babel": "^4.1.1",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^5.0.3",
    "eslint-plugin-react": "^7.0.1",
    "expect": "^1.20.2",
    "generate-changelog": "^1.1.0",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^20.0.0",
    "pre-commit": "^1.2.2",
    "react-addons-test-utils": "^15.5.1",
    "react-test-renderer": "^15.5.4",
    "sinon": "^2.2.0",
    "webpack": "^2.5.1"
  },
  "homepage": "https://github.com/Imballinst/react-bs-datatable#readme",
  "jest": {
    "moduleNameMapper": {
      "^.+\\.(css|scss)$": "identity-obj-proxy"
    },
    "setupFiles": [
      "./test/jestsetup.js"
    ],
    "snapshotSerializers": [
      "<rootDir>/node_modules/enzyme-to-json/serializer"
    ],
    "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(js)$"
  },
  "keywords": [
    "bootstrap",
    "datatable",
    "react",
    "react-bootstrap"
  ],
  "license": "MIT",
  "main": "lib/Table.js",
  "name": "react-bs-datatable",
  "optionalDependencies": {},
  "pre-commit": [
    "build",
    "test"
  ],
  "readme": "# React Bootstrap Datatable\n\n[![Build Status](https://travis-ci.org/Imballinst/react-bs-datatable.svg?branch=master)](https://travis-ci.org/Imballinst/react-bs-datatable)\n[![npm version](https://badge.fury.io/js/react-bs-datatable.svg)](https://badge.fury.io/js/react-bs-datatable)\n\n[![NPM](https://nodei.co/npm/react-bs-datatable.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/react-bs-datatable/)\n\nInspired by [react-data-components](https://github.com/carlosrocha/react-data-components). This library uses [react-bootstrap](http://react-bootstrap.github.io/) stylesheets and javascripts. In addition, this library also uses [font-awesome](http://fontawesome.io/) for the table header, clear filter, and other stuffs.\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Key Features](#key-features)\n- [Props](#props)\n- [Styling](#styling)\n- [Example Usage](#example-usage)\n- [Extending the Table](#extending-the-table)\n- [Next Features or Improvements](#next-features-or-improvements)\n- [Contributing](#contributing)\n\n## Installation\n\n```\n# With NPM\nnpm install --save react-bs-datatable bootstrap-sass font-awesome\n\n# With Yarn\nyarn add react-bs-datatable bootstrap-sass font-awesome\n```\n\n## Key features\n\n1. Sort\n2. Filter\n3. Pagination\n4. Custom Labels\n5. Presentational and raw data separation\n6. Custom column sort and column filter function\n\n## Props\n\n- initialSort: Object, consists of `prop` (String) and `isAscending` (Boolean). Default: `undefined`.\n- keyName **(Required)**: String. It is used to prepend the key property of children elements.\n- labels: Object, consists of keys and values. Default: `{}`. Used to modify tabel labels such as:\n  - `first`: String. First page label button.\n  - `last`: String. Last page label button.\n  - `prev`: String. Previous page label button.\n  - `next`: String. Next page label button.\n  - `show`: String. The text before select option of `rowsPerPageOption`.\n  - `entries`: String. The text after select option of `rowsPerPageOption`.\n  - `noResults`: String. Displayed text if table has empty `tableBody` or `[]`.\n  - `filterPlaceholder`: String. Custom placeholder text on the search filter if at least one column has `filterable` prop.\n- onSort: Object, consists of keys and values. Key is the prop name and value is the quantifier function. Each function has a parameter which is the real value of that column. Default: `undefined`.\n- onFilter: see `onSort`.\n- tableBody **(Required)**: Array of objects, each consists of `propNames` and `propValues`, depends on how many columns you define in the header.\n- tableClass: String. Classes used in `<table>` element tag. Default: `''`.\n- tableHeader **(Required)**: Array of objects, each consists of:\n  - `cell`: Function. Returns a React Component for the table to be rendered.\n  - `filterable`: Boolean. Enable/disable filtering on the column.\n  - `prop` **(Required)**: String. Column name for the table body.\n  - `sortable`: Boolean. Enable/disable sorting on the column.\n  - `title`: String. Text for the header column.\n- rowsPerPage: Integer. Initial rows per page. If this and `rowsPerPageOption` are provided but `rowsPerPage` is not a member of `rowsPerPageOption`, then `rowsPerPageOption[0]` will be chosen as the property instead. If not provided, then no pagination options will be rendered. Default: `undefined`.\n- rowsPerPageOption: Array of integers for pagination options. Default: `undefined`.\n\n## Styling\n\nThis package doesn't include Bootstrap stylesheets. If you want to include it, you can do so by importing its CSS **or** its SCSS [bootstrap-sass](https://github.com/twbs/bootstrap-sass). You can also style the table yourself.\n\n```scss\n.table-datatable {\n  .thead-default {\n    .thead-tr-default {\n      .thead-th-default {\n        &.sortable {\n          // If and only if a column is sortable\n          &:hover {\n            background: #000; // Your color of choice\n            cursor: pointer; // Changes the cursor into a pointer on hover\n          }\n        }\n      }\n    }\n  }\n\n  .tbody-default {\n    .tbody-tr-default {\n      .tbody-td-default {\n        // do what you want\n      }\n    }\n  }\n}\n```\n\n## Example usage\n\n```Javascript\nimport moment from 'moment'; // Example for onSort prop\nimport React from 'react'; // Import React\nimport { render } from 'react-dom'; // Import render method\nimport Datatable from 'react-bs-datatable'; // Import this package\n\nconst header = [\n  { title: 'Username', prop: 'username', sortable: true, filterable: true },\n  { title: 'Name', prop: 'realname', sortable: true },\n  { title: 'Name Uppercased', prop: 'realnameuppercase', cell: (row) => row.realname.toUpperCase() },\n  { title: 'Location', prop: 'location' },\n  { title: 'Last Updated', prop: 'date', sortable: true },\n];\n\nconst body = [\n  {\n    username: 'i-am-billy',\n    realname: 'Billy',\n    location: 'Mars',\n    date: moment().subtract(1, 'days').format('Do MMMM YYYY'),\n  },\n  {\n    username: 'john-nhoj',\n    realname: 'John',\n    location: 'Saturn',\n    date: moment().subtract(2, 'days').format('Do MMMM YYYY'),\n  }\n];\n\nconst onSortFunction = {\n  date(columnValue) {\n    // Convert the string date format to UTC timestamp\n    // So the table could sort it by number instead of by string\n    return moment(columnValue, 'Do MMMM YYYY').valueOf();\n  },\n};\n\nconst customLabels = {\n  first: '<<',\n  last: '>>',\n  prev: '<',\n  next: '>',\n  show: 'Display',\n  entries: 'rows',\n  noResults: 'There is no data to be displayed',\n};\n\n// In your render method\n<Datatable\n  tableHeader={header}\n  tableBody={body}\n  keyName=\"userTable\"\n  tableClass=\"striped hover responsive\"\n  rowsPerPage={5}\n  rowsPerPageOption={[5, 10, 15, 20]}\n  initialSort={{prop: \"username\", isAscending: true}}\n  onSort={onSortFunction}\n  labels={customLabels}\n/>\n```\n\n## Extending the Table\n\nYou can extend the table if you want to create your own layout (position the text filter to the top right, etc). You'll have to import the components from `react-bs-datatable/lib` folder. [CodeSandbox Example](https://codesandbox.io/s/kmzm5wkjlo).\n\n```Javascript\nimport Row from 'react-bootstrap/lib/Row';\nimport Col from 'react-bootstrap/lib/Col';\nimport Table from 'react-bootstrap/lib/Table';\nimport classNames from 'classnames';\nimport Datatable from 'react-bs-datatable';\n\nimport {\n  sortData,\n  filterData,\n  paginateData,\n} from 'react-bs-datatable/lib/utils/ClassHelpers';\nimport Pagination from 'react-bs-datatable/lib/Pagination';\nimport PaginationOpts from 'react-bs-datatable/lib/PaginationOpts';\nimport TableHeader from 'react-bs-datatable/lib/TableHeader';\nimport TableBody from 'react-bs-datatable/lib/TableBody';\nimport Filter from 'react-bs-datatable/lib/Filter';\n\nclass CustomTable extends Datatable {\n  render() {\n    const { sortedProp, filterText, rowsPerPage, currentPage } = this.state;\n    const {\n      tableHeader,\n      tableBody,\n      onSort,\n      onFilter,\n      tableClass: customClass,\n      keyName,\n      labels,\n      rowsPerPageOption,\n    } = this.props;\n\n    const filteredData = filterData(tableHeader, filterText, onFilter, tableBody);\n    const sortedData = sortData(sortedProp, onSort, filteredData);\n\n    const paginatedData = paginateData(rowsPerPage, currentPage, sortedData);\n\n    const tableClass = classNames({\n      'table-datatable': true,\n      [`${customClass}`]: true,\n    });\n\n    return (\n      <Row>\n        <Col xs={12} md={4}>\n          <PaginationOpts\n            labels={labels}\n            onRowsPerPageChange={this.onRowsPerPageChange}\n            rowsPerPage={rowsPerPage}\n            rowsPerPageOption={rowsPerPageOption}\n            keyName={keyName}\n          />\n        </Col>\n        <Col xs={12} md={4}>\n          <Pagination\n            data={sortedData}\n            rowsPerPage={rowsPerPage}\n            keyName={keyName}\n            currentPage={currentPage}\n            onPageNavigate={this.onPageNavigate}\n            labels={labels}\n          />\n        </Col>\n        <Col xs={12} md={4} className=\"text-right\">\n          <Filter\n            tableHeader={tableHeader}\n            onChangeFilter={this.onChangeFilter}\n            filterText={filterText}\n            keyName={keyName}\n            placeholder={labels.filterPlaceholder}\n          />\n        </Col>\n        <Col xs={12}>\n          <Table className={tableClass}>\n            <TableHeader\n              tableHeader={tableHeader}\n              keyName={keyName}\n              sortedProp={sortedProp}\n              onSortChange={this.onSortChange}\n            />\n            <TableBody\n              tableHeader={tableHeader}\n              keyName={keyName}\n              labels={labels}\n              paginatedData={paginatedData}\n            />\n          </Table>\n        </Col>\n      </Row>\n    );\n  }\n}\n```\n\n## Next Features or Improvements\n\n- [x] Sortable props for each column instead of globally\n- [x] Custom sort function (eg. date is ordered by timestamp not by string)\n- [x] Filterable props for each column instead of globally\n- [x] Custom table classes (it's fixed to striped, responsive, and hover at the moment)\n- [x] More extensive unit testing\n- [x] Custom labels\n- [x] Option to separate presentational and raw data (by using `cell` property in `tableHeader`)\n- [ ] Lazy loading for big data (virtualization, asynchronous pagination)\n- [ ] Better documentation, better demo page\n- [ ] Webpack 4\n- [ ] Reduce the bundle size\n\n## Contributing\n\nFeel free to contribute by creating issues and/or pull requests. I will do my best to address them as fast as I can.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Imballinst/react-bs-datatable.git"
  },
  "scripts": {
    "analyze": "webpack --json | webpack-bundle-size-analyzer",
    "build": "npm run build:lib && git add -A",
    "build:lib": "cd src && babel . --out-dir ../lib --ignore test.js",
    "eslint": "eslint --fix ./src/.",
    "jest:watch": "jest --watch",
    "release:major": "changelog -M && git add CHANGELOG.md && git commit -m \"updated CHANGELOG.md\" && npm version major && git push origin && git push origin --tags",
    "release:minor": "changelog -m && git add CHANGELOG.md && git commit -m \"updated CHANGELOG.md\" && npm version minor && git push origin && git push origin --tags",
    "release:patch": "changelog -p && git add CHANGELOG.md && git commit -m \"updated CHANGELOG.md\" && npm version patch && git push origin && git push origin --tags",
    "test": "jest && npm run eslint"
  },
  "version": "1.2.8"
}
