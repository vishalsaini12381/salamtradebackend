{
  "_from": "loadjs",
  "_id": "loadjs@3.6.1",
  "_inBundle": false,
  "_integrity": "sha512-AZEBw2GWdJk2IzBgQ+Wohoao5j+t0rajqK8dJu8jQqgYxDTxhmCt0ayMo/vCa0ZAMvZxnJcam6uLICfnVd8KAw==",
  "_location": "/loadjs",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "loadjs",
    "fetchSpec": "latest",
    "name": "loadjs",
    "raw": "loadjs",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/loadjs/-/loadjs-3.6.1.tgz",
  "_shasum": "1e756ccd4f4c5ed4988085b330e1b4ad9b6a8340",
  "_spec": "loadjs",
  "_where": "/home/shivendra/Desktop/techoffice/salamtrade/salamclient",
  "bugs": {
    "email": "contact@muicss.com",
    "url": "https://github.com/muicss/loadjs/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Tiny async loader for modern browsers",
  "devDependencies": {
    "del": "^4.1.0",
    "fsevents": "^1.2.7",
    "gulp": "^4.0.0",
    "gulp-jshint": "^2.1.0",
    "gulp-rename": "^1.4.0",
    "gulp-uglify": "^3.0.2",
    "gulp-umd": "^2.0.0",
    "jshint": "^2.10.2"
  },
  "homepage": "https://github.com/muicss/loadjs",
  "keywords": [
    "async",
    "dependency manager",
    "loader"
  ],
  "license": "MIT",
  "main": "dist/loadjs.umd.js",
  "name": "loadjs",
  "optionalDependencies": {},
  "readme": "# LoadJS\n\n<img src=\"https://www.muicss.com/static/images/loadjs.svg\" width=\"250px\">\n\nLoadJS is a tiny async loader for modern browsers (884 bytes).\n\n[![Dependency Status](https://david-dm.org/muicss/loadjs.svg)](https://david-dm.org/muicss/loadjs)\n[![devDependency Status](https://david-dm.org/muicss/loadjs/dev-status.svg)](https://david-dm.org/muicss/loadjs?type=dev)\n[![CDNJS](https://img.shields.io/cdnjs/v/loadjs.svg)](https://cdnjs.com/libraries/loadjs)\n\n## Introduction\n\nLoadJS is a tiny async loading library for modern browsers (IE9+). It has a simple yet powerful dependency management system that lets you fetch JavaScript, CSS and image files in parallel and execute code after the dependencies have been met. The recommended way to use LoadJS is to include the minified source code of [loadjs.js](https://raw.githubusercontent.com/muicss/loadjs/master/dist/loadjs.min.js) in your &lt;html&gt; (possibly in the &lt;head&gt; tag) and then use the `loadjs` global to manage JavaScript dependencies after pageload.\n\nLoadJS is based on the excellent [$script](https://github.com/ded/script.js) library by [Dustin Diaz](https://github.com/ded). We kept the behavior of the library the same but we re-wrote the code from scratch to add support for success/error callbacks and to optimize the library for modern browsers. LoadJS is 884 bytes (minified + gzipped).\n\nHere's an example of what you can do with LoadJS:\n\n```javascript\n// define a dependency bundle and execute code when it loads\nloadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar');\n\nloadjs.ready('foobar', function() {\n  /* foo.js & bar.js loaded */\n});\n```\n\nYou can also use more advanced syntax for more options:\n```javascript\n// define a dependency bundle with advanced options\nloadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar', {\n  before: function(path, scriptEl) { /* execute code before fetch */ },\n  async: true,  // load files synchronously or asynchronously (default: true)\n  numRetries: 3  // see caveats about using numRetries with async:false (default: 0),\n  returnPromise: false  // return Promise object (default: false)\n});\n\nloadjs.ready('foobar', {\n  success: function() { /* foo.js & bar.js loaded */ },\n  error: function(depsNotFound) { /* foobar bundle load failed */ },\n});\n```\n\nThe latest version of LoadJS can be found in the `dist/` directory in this repository:\n * [https://cdn.rawgit.com/muicss/loadjs/3.6.1/dist/loadjs.js](https://cdn.rawgit.com/muicss/loadjs/3.6.1/dist/loadjs.js) (for development)\n * [https://cdn.rawgit.com/muicss/loadjs/3.6.1/dist/loadjs.min.js](https://cdn.rawgit.com/muicss/loadjs/3.6.1/dist/loadjs.min.js) (for production)\n\nYou can also use it as a CJS or AMD module:\n\n```bash\n$ npm install --save loadjs\n```\n\n```javascript\nvar loadjs = require('loadjs');\n\nloadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar');\n\nloadjs.ready('foobar', function() {\n  /* foo.js & bar.js loaded */\n});\n```\n\n## Browser Support\n\n * IE9+ (`async: false` support only works in IE10+)\n * Opera 12+\n * Safari 5+\n * Chrome\n * Firefox\n * iOS 6+\n * Android 4.4+\n\nLoadJS also detects script load failures from AdBlock Plus and Ghostery in:\n\n * Safari\n * Chrome\n\nNote: LoadJS treats empty CSS files as load failures in IE9-11 and uses `rel=\"preload\"` to load CSS files in Edge (to get around lack of support for onerror events on `<link rel=\"stylesheet\">` tags)\n\n## Documentation\n\n1. Load a single file\n\n    ```javascript\n    loadjs('/path/to/foo.js', function() {\n      /* foo.js loaded */\n    });\n    ```\n\n1. Fetch files in parallel and load them asynchronously\n\n    ```javascript\n    loadjs(['/path/to/foo.js', '/path/to/bar.js'], function() {\n      /* foo.js and bar.js loaded */\n    });\n    ```\n\n1. Fetch JavaScript, CSS and image files\n\n    ```javascript\n    loadjs(['/path/to/foo.css', '/path/to/bar.png', 'path/to/thunk.js'], function() {\n      /* foo.css, bar.png and thunk.js loaded */\n    });\n    ```\n\n1. Force treat file as CSS stylesheet\n\n    ```javascript\n    loadjs(['css!/path/to/cssfile.custom'], function() {\n      /* cssfile.custom loaded as stylesheet */\n    });\n    ```\n\n1. Force treat file as image\n\n    ```javascript\n    loadjs(['img!/path/to/image.custom'], function() {\n      /* image.custom loaded */\n    });\n    ```\n\n1. Add a bundle id\n\n    ```javascript\n    loadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar', function() {\n      /* foo.js & bar.js loaded */\n    });\n    ```\n\n1. Use .ready() to define bundles and callbacks separately\n\n    ```javascript\n    loadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar');\n\n    loadjs.ready('foobar', function() {\n      /* foo.js & bar.js loaded */\n    });\n    ```\n\n1. Use multiple bundles in .ready() dependency lists\n\n    ```javascript\n    loadjs('/path/to/foo.js', 'foo');\n    loadjs(['/path/to/bar1.js', '/path/to/bar2.js'], 'bar');\n\n    loadjs.ready(['foo', 'bar'], function() {\n      /* foo.js & bar1.js & bar2.js loaded */\n    });\n    ```\n\n1. Chain .ready() together\n\n    ```javascript\n    loadjs('/path/to/foo.js', 'foo');\n    loadjs('/path/to/bar.js', 'bar');\n\n    loadjs\n      .ready('foo', function() {\n        /* foo.js loaded */\n      })\n      .ready('bar', function() {\n        /* bar.js loaded */\n      });\n    ```\n\n1. Use Promises to register callbacks\n\n   ```javascript\n   loadjs(['/path/to/foo.js', '/path/to/bar.js'], {returnPromise: true})\n     .then(function() { /* foo.js & bar.js loaded */ })\n     .catch(function(pathsNotFound) { /* at least one didn't load */ });\n   ```\n\n1. Check if bundle has already been defined\n\n    ```javascript\n    if (!loadjs.isDefined('foobar')) {\n      loadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar', function() {\n        /* foo.js & bar.js loaded */\n      });\n    }\n    ```\n\n1. Fetch files in parallel and load them in series\n\n    ```javascript\n    loadjs(['/path/to/foo.js', '/path/to/bar.js'], {\n      success: function() { /* foo.js and bar.js loaded in series */ },\n      async: false\n    });\n    ```\n\n1. Add an error callback\n\n    ```javascript\n    loadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar', {\n      success: function() { /* foo.js & bar.js loaded */ },\n      error: function(pathsNotFound) { /* at least one path didn't load */ }\n    });\n    ```\n\n1. Retry files before calling the error callback\n\n    ```javascript\n    loadjs(['/path/to/foo.js', '/path/to/bar.js'], 'foobar', {\n      success: function() { /* foo.js & bar.js loaded */ },\n      error: function(pathsNotFound) { /* at least one path didn't load */ },\n      numRetries: 3\n    });\n    \n    // NOTE: Using `numRetries` with `async: false` can cause files to load out-of-sync on retries\n    ```\n\n1. Execute a callback before script tags are embedded\n\n    ```javascript\n    loadjs(['/path/to/foo.js', '/path/to/bar.js'], {\n      success: function() {},\n      error: function(pathsNotFound) {},\n      before: function(path, scriptEl) {\n        /* called for each script node before being embedded */\n        if (path === '/path/to/foo.js') scriptEl.crossOrigin = true;\n      }\n    });\n    ```\n\n1. Bypass LoadJS default DOM insertion mechanism (DOM `<head>`)\n\n    ```javascript\n    loadjs(['/path/to/foo.js'], {\n      success: function() {},\n      error: function(pathsNotFound) {},\n      before: function(path, scriptEl) {\n        document.body.appendChild(scriptEl);\n      \n        /* return `false` to bypass default DOM insertion mechanism */\n        return false;\n      }\n    });\n    ```\n\n1. Use bundle ids in error callback\n\n    ```javascript\n    loadjs('/path/to/foo.js', 'foo');\n    loadjs('/path/to/bar.js', 'bar');\n    loadjs(['/path/to/thunkor.js', '/path/to/thunky.js'], 'thunk');\n\n    // wait for multiple depdendencies\n    loadjs.ready(['foo', 'bar', 'thunk'], {\n      success: function() {\n        // foo.js & bar.js & thunkor.js & thunky.js loaded\n      },\n      error: function(depsNotFound) {\n        if (depsNotFound.indexOf('foo') > -1) {};  // foo failed\n        if (depsNotFound.indexOf('bar') > -1) {};  // bar failed\n        if (depsNotFound.indexOf('thunk') > -1) {};  // thunk failed\n      }\n    });\n    ```\n  \n1. Use .done() for more control\n\n    ```javascript\n    loadjs.ready(['dependency1', 'dependency2'], function() {\n      /* run code after dependencies have been met */\n    });\n\n    function fn1() {\n      loadjs.done('dependency1');\n    }\n  \n    function fn2() {\n      loadjs.done('dependency2');\n    }\n    ```\n\n1. Reset dependency trackers\n\n    ```javascript\n    loadjs.reset();\n    ```\n\n1. Implement a require-like dependency manager\n\n    ```javascript\n    var bundles = {\n      'bundleA': ['/file1.js', '/file2.js'],\n      'bundleB': ['/file3.js', '/file4.js']\n    };\n\n    function require(bundleIds, callbackFn) {\n      bundleIds.forEach(function(bundleId) {\n        if (!loadjs.isDefined(bundleId)) loadjs(bundles[bundleId], bundleId);\n      });\n      loadjs.ready(bundleIds, callbackFn);\n    }\n\n    require(['bundleA'], function() { /* bundleA loaded */ });\n    require(['bundleB'], function() { /* bundleB loaded */ });\n    require(['bundleA', 'bundleB'], function() { /* bundleA and bundleB loaded */ });\n    ```\n\n## Directory structure\n\n<pre>\nloadjs/\n├── dist\n│   ├── loadjs.js\n│   ├── loadjs.min.js\n│   └── loadjs.umd.js\n├── examples\n├── gulpfile.js\n├── LICENSE.txt\n├── package.json\n├── README.md\n├── src\n│   └── loadjs.js\n├── test\n└── umd-templates\n</pre>\n\n## Development Quickstart\n\n1. Install dependencies\n\n    * [nodejs](http://nodejs.org/)\n    * [npm](https://www.npmjs.org/)\n    * http-server (via npm)\n\n1. Clone repository\n\n    ```bash\n    $ git clone git@github.com:muicss/loadjs.git\n    $ cd loadjs\n    ```\n\n1. Install node dependencies using npm\n\n    ```bash\n    $ npm install\n    ```\n\n1. Build examples\n\n    ```bash\n    $ npm run build-examples\n    ```\n\n    To view the examples you can use any static file server. To use the `nodejs` http-server module:\n\n    ```bash\n    $ npm install http-server\n    $ npm run http-server -- -p 3000\n    ```\n\n    Then visit [http://localhost:3000/examples](http://localhost:3000/examples)\n\n1. Build distribution files\n\n    ```bash\n    $ npm run build-dist\n    ```\n\n    The files will be located in the `dist` directory.\n\n1. Run tests\n\n     To run the browser tests first build the `loadjs` library:\n\n     ```bash\n     $ npm run build-tests\n     ```\n\n     Then visit [http://localhost:3000/test](http://localhost:3000/test)\n\n1. Build all files\n\n     ```bash\n     $ npm run build-all\n     ```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/muicss/loadjs.git"
  },
  "scripts": {
    "build-all": "gulp build-all",
    "build-dist": "gulp build-dist",
    "build-examples": "gulp build-examples",
    "build-tests": "gulp build-tests",
    "gulp": "gulp",
    "http-server": "http-server"
  },
  "version": "3.6.1"
}
